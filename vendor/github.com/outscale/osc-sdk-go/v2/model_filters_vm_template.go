/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * API version: 1.34.3
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// FiltersVmTemplate One or more filters.
type FiltersVmTemplate struct {
	// The number of vCores.
	CpuCores *[]int32 `json:"CpuCores,omitempty"`
	// The processor generations (for example, `v4`).
	CpuGenerations *[]string `json:"CpuGenerations,omitempty"`
	// The performances of the VMs.
	CpuPerformances *[]string `json:"CpuPerformances,omitempty"`
	// The descriptions of the VM templates.
	Descriptions *[]string `json:"Descriptions,omitempty"`
	// The IDs of the OMIs.
	ImageIds *[]string `json:"ImageIds,omitempty"`
	// The names of the keypairs.
	KeypairNames *[]string `json:"KeypairNames,omitempty"`
	// The amount of RAM.
	Rams *[]int32 `json:"Rams,omitempty"`
	// The keys of the tags associated with the VM templates.
	TagKeys *[]string `json:"TagKeys,omitempty"`
	// The values of the tags associated with the VM templates.
	TagValues *[]string `json:"TagValues,omitempty"`
	// The key/value combination of the tags associated with the VM templates, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.
	Tags *[]string `json:"Tags,omitempty"`
	// The IDs of the VM templates.
	VmTemplateIds *[]string `json:"VmTemplateIds,omitempty"`
	// The names of the VM templates.
	VmTemplateNames *[]string `json:"VmTemplateNames,omitempty"`
}

// NewFiltersVmTemplate instantiates a new FiltersVmTemplate object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiltersVmTemplate() *FiltersVmTemplate {
	this := FiltersVmTemplate{}
	return &this
}

// NewFiltersVmTemplateWithDefaults instantiates a new FiltersVmTemplate object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltersVmTemplateWithDefaults() *FiltersVmTemplate {
	this := FiltersVmTemplate{}
	return &this
}

// GetCpuCores returns the CpuCores field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetCpuCores() []int32 {
	if o == nil || o.CpuCores == nil {
		var ret []int32
		return ret
	}
	return *o.CpuCores
}

// GetCpuCoresOk returns a tuple with the CpuCores field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetCpuCoresOk() (*[]int32, bool) {
	if o == nil || o.CpuCores == nil {
		return nil, false
	}
	return o.CpuCores, true
}

// HasCpuCores returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasCpuCores() bool {
	if o != nil && o.CpuCores != nil {
		return true
	}

	return false
}

// SetCpuCores gets a reference to the given []int32 and assigns it to the CpuCores field.
func (o *FiltersVmTemplate) SetCpuCores(v []int32) {
	o.CpuCores = &v
}

// GetCpuGenerations returns the CpuGenerations field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetCpuGenerations() []string {
	if o == nil || o.CpuGenerations == nil {
		var ret []string
		return ret
	}
	return *o.CpuGenerations
}

// GetCpuGenerationsOk returns a tuple with the CpuGenerations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetCpuGenerationsOk() (*[]string, bool) {
	if o == nil || o.CpuGenerations == nil {
		return nil, false
	}
	return o.CpuGenerations, true
}

// HasCpuGenerations returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasCpuGenerations() bool {
	if o != nil && o.CpuGenerations != nil {
		return true
	}

	return false
}

// SetCpuGenerations gets a reference to the given []string and assigns it to the CpuGenerations field.
func (o *FiltersVmTemplate) SetCpuGenerations(v []string) {
	o.CpuGenerations = &v
}

// GetCpuPerformances returns the CpuPerformances field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetCpuPerformances() []string {
	if o == nil || o.CpuPerformances == nil {
		var ret []string
		return ret
	}
	return *o.CpuPerformances
}

// GetCpuPerformancesOk returns a tuple with the CpuPerformances field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetCpuPerformancesOk() (*[]string, bool) {
	if o == nil || o.CpuPerformances == nil {
		return nil, false
	}
	return o.CpuPerformances, true
}

// HasCpuPerformances returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasCpuPerformances() bool {
	if o != nil && o.CpuPerformances != nil {
		return true
	}

	return false
}

// SetCpuPerformances gets a reference to the given []string and assigns it to the CpuPerformances field.
func (o *FiltersVmTemplate) SetCpuPerformances(v []string) {
	o.CpuPerformances = &v
}

// GetDescriptions returns the Descriptions field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetDescriptions() []string {
	if o == nil || o.Descriptions == nil {
		var ret []string
		return ret
	}
	return *o.Descriptions
}

// GetDescriptionsOk returns a tuple with the Descriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetDescriptionsOk() (*[]string, bool) {
	if o == nil || o.Descriptions == nil {
		return nil, false
	}
	return o.Descriptions, true
}

// HasDescriptions returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasDescriptions() bool {
	if o != nil && o.Descriptions != nil {
		return true
	}

	return false
}

// SetDescriptions gets a reference to the given []string and assigns it to the Descriptions field.
func (o *FiltersVmTemplate) SetDescriptions(v []string) {
	o.Descriptions = &v
}

// GetImageIds returns the ImageIds field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetImageIds() []string {
	if o == nil || o.ImageIds == nil {
		var ret []string
		return ret
	}
	return *o.ImageIds
}

// GetImageIdsOk returns a tuple with the ImageIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetImageIdsOk() (*[]string, bool) {
	if o == nil || o.ImageIds == nil {
		return nil, false
	}
	return o.ImageIds, true
}

// HasImageIds returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasImageIds() bool {
	if o != nil && o.ImageIds != nil {
		return true
	}

	return false
}

// SetImageIds gets a reference to the given []string and assigns it to the ImageIds field.
func (o *FiltersVmTemplate) SetImageIds(v []string) {
	o.ImageIds = &v
}

// GetKeypairNames returns the KeypairNames field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetKeypairNames() []string {
	if o == nil || o.KeypairNames == nil {
		var ret []string
		return ret
	}
	return *o.KeypairNames
}

// GetKeypairNamesOk returns a tuple with the KeypairNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetKeypairNamesOk() (*[]string, bool) {
	if o == nil || o.KeypairNames == nil {
		return nil, false
	}
	return o.KeypairNames, true
}

// HasKeypairNames returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasKeypairNames() bool {
	if o != nil && o.KeypairNames != nil {
		return true
	}

	return false
}

// SetKeypairNames gets a reference to the given []string and assigns it to the KeypairNames field.
func (o *FiltersVmTemplate) SetKeypairNames(v []string) {
	o.KeypairNames = &v
}

// GetRams returns the Rams field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetRams() []int32 {
	if o == nil || o.Rams == nil {
		var ret []int32
		return ret
	}
	return *o.Rams
}

// GetRamsOk returns a tuple with the Rams field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetRamsOk() (*[]int32, bool) {
	if o == nil || o.Rams == nil {
		return nil, false
	}
	return o.Rams, true
}

// HasRams returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasRams() bool {
	if o != nil && o.Rams != nil {
		return true
	}

	return false
}

// SetRams gets a reference to the given []int32 and assigns it to the Rams field.
func (o *FiltersVmTemplate) SetRams(v []int32) {
	o.Rams = &v
}

// GetTagKeys returns the TagKeys field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetTagKeys() []string {
	if o == nil || o.TagKeys == nil {
		var ret []string
		return ret
	}
	return *o.TagKeys
}

// GetTagKeysOk returns a tuple with the TagKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetTagKeysOk() (*[]string, bool) {
	if o == nil || o.TagKeys == nil {
		return nil, false
	}
	return o.TagKeys, true
}

// HasTagKeys returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasTagKeys() bool {
	if o != nil && o.TagKeys != nil {
		return true
	}

	return false
}

// SetTagKeys gets a reference to the given []string and assigns it to the TagKeys field.
func (o *FiltersVmTemplate) SetTagKeys(v []string) {
	o.TagKeys = &v
}

// GetTagValues returns the TagValues field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetTagValues() []string {
	if o == nil || o.TagValues == nil {
		var ret []string
		return ret
	}
	return *o.TagValues
}

// GetTagValuesOk returns a tuple with the TagValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetTagValuesOk() (*[]string, bool) {
	if o == nil || o.TagValues == nil {
		return nil, false
	}
	return o.TagValues, true
}

// HasTagValues returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasTagValues() bool {
	if o != nil && o.TagValues != nil {
		return true
	}

	return false
}

// SetTagValues gets a reference to the given []string and assigns it to the TagValues field.
func (o *FiltersVmTemplate) SetTagValues(v []string) {
	o.TagValues = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *FiltersVmTemplate) SetTags(v []string) {
	o.Tags = &v
}

// GetVmTemplateIds returns the VmTemplateIds field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetVmTemplateIds() []string {
	if o == nil || o.VmTemplateIds == nil {
		var ret []string
		return ret
	}
	return *o.VmTemplateIds
}

// GetVmTemplateIdsOk returns a tuple with the VmTemplateIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetVmTemplateIdsOk() (*[]string, bool) {
	if o == nil || o.VmTemplateIds == nil {
		return nil, false
	}
	return o.VmTemplateIds, true
}

// HasVmTemplateIds returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasVmTemplateIds() bool {
	if o != nil && o.VmTemplateIds != nil {
		return true
	}

	return false
}

// SetVmTemplateIds gets a reference to the given []string and assigns it to the VmTemplateIds field.
func (o *FiltersVmTemplate) SetVmTemplateIds(v []string) {
	o.VmTemplateIds = &v
}

// GetVmTemplateNames returns the VmTemplateNames field value if set, zero value otherwise.
func (o *FiltersVmTemplate) GetVmTemplateNames() []string {
	if o == nil || o.VmTemplateNames == nil {
		var ret []string
		return ret
	}
	return *o.VmTemplateNames
}

// GetVmTemplateNamesOk returns a tuple with the VmTemplateNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVmTemplate) GetVmTemplateNamesOk() (*[]string, bool) {
	if o == nil || o.VmTemplateNames == nil {
		return nil, false
	}
	return o.VmTemplateNames, true
}

// HasVmTemplateNames returns a boolean if a field has been set.
func (o *FiltersVmTemplate) HasVmTemplateNames() bool {
	if o != nil && o.VmTemplateNames != nil {
		return true
	}

	return false
}

// SetVmTemplateNames gets a reference to the given []string and assigns it to the VmTemplateNames field.
func (o *FiltersVmTemplate) SetVmTemplateNames(v []string) {
	o.VmTemplateNames = &v
}

func (o FiltersVmTemplate) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CpuCores != nil {
		toSerialize["CpuCores"] = o.CpuCores
	}
	if o.CpuGenerations != nil {
		toSerialize["CpuGenerations"] = o.CpuGenerations
	}
	if o.CpuPerformances != nil {
		toSerialize["CpuPerformances"] = o.CpuPerformances
	}
	if o.Descriptions != nil {
		toSerialize["Descriptions"] = o.Descriptions
	}
	if o.ImageIds != nil {
		toSerialize["ImageIds"] = o.ImageIds
	}
	if o.KeypairNames != nil {
		toSerialize["KeypairNames"] = o.KeypairNames
	}
	if o.Rams != nil {
		toSerialize["Rams"] = o.Rams
	}
	if o.TagKeys != nil {
		toSerialize["TagKeys"] = o.TagKeys
	}
	if o.TagValues != nil {
		toSerialize["TagValues"] = o.TagValues
	}
	if o.Tags != nil {
		toSerialize["Tags"] = o.Tags
	}
	if o.VmTemplateIds != nil {
		toSerialize["VmTemplateIds"] = o.VmTemplateIds
	}
	if o.VmTemplateNames != nil {
		toSerialize["VmTemplateNames"] = o.VmTemplateNames
	}
	return json.Marshal(toSerialize)
}

type NullableFiltersVmTemplate struct {
	value *FiltersVmTemplate
	isSet bool
}

func (v NullableFiltersVmTemplate) Get() *FiltersVmTemplate {
	return v.value
}

func (v *NullableFiltersVmTemplate) Set(val *FiltersVmTemplate) {
	v.value = val
	v.isSet = true
}

func (v NullableFiltersVmTemplate) IsSet() bool {
	return v.isSet
}

func (v *NullableFiltersVmTemplate) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiltersVmTemplate(val *FiltersVmTemplate) *NullableFiltersVmTemplate {
	return &NullableFiltersVmTemplate{value: val, isSet: true}
}

func (v NullableFiltersVmTemplate) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiltersVmTemplate) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
