/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * API version: 1.35.4
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// HealthCheck Information about the health check configuration.
type HealthCheck struct {
	// The number of seconds between two requests (between `5` and `600` both included).
	CheckInterval int32 `json:"CheckInterval"`
	// The number of consecutive successful requests before considering the VM as healthy (between `2` and `10` both included).
	HealthyThreshold int32 `json:"HealthyThreshold"`
	// If you use the HTTP or HTTPS protocols, the request URL path. Always starts with a slash (`/`).
	Path *string `json:"Path,omitempty"`
	// The port number (between `1` and `65535`, both included).
	Port int32 `json:"Port"`
	// The protocol for the URL of the VM (`HTTP` \\| `HTTPS` \\| `TCP` \\| `SSL`).
	Protocol string `json:"Protocol"`
	// The maximum waiting time for a response before considering the VM as unhealthy, in seconds (between `2` and `60` both included).
	Timeout int32 `json:"Timeout"`
	// The number of consecutive failed requests before considering the VM as unhealthy (between `2` and `10` both included).
	UnhealthyThreshold int32 `json:"UnhealthyThreshold"`
}

// NewHealthCheck instantiates a new HealthCheck object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewHealthCheck(checkInterval int32, healthyThreshold int32, port int32, protocol string, timeout int32, unhealthyThreshold int32) *HealthCheck {
	this := HealthCheck{}
	this.CheckInterval = checkInterval
	this.HealthyThreshold = healthyThreshold
	this.Port = port
	this.Protocol = protocol
	this.Timeout = timeout
	this.UnhealthyThreshold = unhealthyThreshold
	return &this
}

// NewHealthCheckWithDefaults instantiates a new HealthCheck object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewHealthCheckWithDefaults() *HealthCheck {
	this := HealthCheck{}
	return &this
}

// GetCheckInterval returns the CheckInterval field value
func (o *HealthCheck) GetCheckInterval() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.CheckInterval
}

// GetCheckIntervalOk returns a tuple with the CheckInterval field value
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetCheckIntervalOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CheckInterval, true
}

// SetCheckInterval sets field value
func (o *HealthCheck) SetCheckInterval(v int32) {
	o.CheckInterval = v
}

// GetHealthyThreshold returns the HealthyThreshold field value
func (o *HealthCheck) GetHealthyThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.HealthyThreshold
}

// GetHealthyThresholdOk returns a tuple with the HealthyThreshold field value
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetHealthyThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.HealthyThreshold, true
}

// SetHealthyThreshold sets field value
func (o *HealthCheck) SetHealthyThreshold(v int32) {
	o.HealthyThreshold = v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *HealthCheck) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *HealthCheck) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *HealthCheck) SetPath(v string) {
	o.Path = &v
}

// GetPort returns the Port field value
func (o *HealthCheck) GetPort() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Port
}

// GetPortOk returns a tuple with the Port field value
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetPortOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Port, true
}

// SetPort sets field value
func (o *HealthCheck) SetPort(v int32) {
	o.Port = v
}

// GetProtocol returns the Protocol field value
func (o *HealthCheck) GetProtocol() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Protocol
}

// GetProtocolOk returns a tuple with the Protocol field value
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetProtocolOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Protocol, true
}

// SetProtocol sets field value
func (o *HealthCheck) SetProtocol(v string) {
	o.Protocol = v
}

// GetTimeout returns the Timeout field value
func (o *HealthCheck) GetTimeout() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.Timeout
}

// GetTimeoutOk returns a tuple with the Timeout field value
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetTimeoutOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Timeout, true
}

// SetTimeout sets field value
func (o *HealthCheck) SetTimeout(v int32) {
	o.Timeout = v
}

// GetUnhealthyThreshold returns the UnhealthyThreshold field value
func (o *HealthCheck) GetUnhealthyThreshold() int32 {
	if o == nil {
		var ret int32
		return ret
	}

	return o.UnhealthyThreshold
}

// GetUnhealthyThresholdOk returns a tuple with the UnhealthyThreshold field value
// and a boolean to check if the value has been set.
func (o *HealthCheck) GetUnhealthyThresholdOk() (*int32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.UnhealthyThreshold, true
}

// SetUnhealthyThreshold sets field value
func (o *HealthCheck) SetUnhealthyThreshold(v int32) {
	o.UnhealthyThreshold = v
}

func (o HealthCheck) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if true {
		toSerialize["CheckInterval"] = o.CheckInterval
	}
	if true {
		toSerialize["HealthyThreshold"] = o.HealthyThreshold
	}
	if o.Path != nil {
		toSerialize["Path"] = o.Path
	}
	if true {
		toSerialize["Port"] = o.Port
	}
	if true {
		toSerialize["Protocol"] = o.Protocol
	}
	if true {
		toSerialize["Timeout"] = o.Timeout
	}
	if true {
		toSerialize["UnhealthyThreshold"] = o.UnhealthyThreshold
	}
	return json.Marshal(toSerialize)
}

type NullableHealthCheck struct {
	value *HealthCheck
	isSet bool
}

func (v NullableHealthCheck) Get() *HealthCheck {
	return v.value
}

func (v *NullableHealthCheck) Set(val *HealthCheck) {
	v.value = val
	v.isSet = true
}

func (v NullableHealthCheck) IsSet() bool {
	return v.isSet
}

func (v *NullableHealthCheck) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableHealthCheck(val *HealthCheck) *NullableHealthCheck {
	return &NullableHealthCheck{value: val, isSet: true}
}

func (v NullableHealthCheck) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableHealthCheck) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
