/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * API version: 1.34.3
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// UnitPriceEntry Information about the unit price entry.
type UnitPriceEntry struct {
	// The currency of your account for the `UnitPrice` parameter, in the ISO-4217 format (for example, `EUR`).
	Currency *string `json:"Currency,omitempty"`
	// The operation associated with the catalog entry (for example, `RunInstances-OD` or `CreateVolume`).
	Operation *string `json:"Operation,omitempty"`
	// The service associated with the catalog entry (for example, `TinaOS-FCU` or `TinaOS-OOS`).
	Service *string `json:"Service,omitempty"`
	// The type associated with the catalog entry (for example, `BSU:VolumeIOPS:io1` or `BoxUsage:tinav6.c6r16p3`).
	Type *string `json:"Type,omitempty"`
	// The unit associated with the catalog entry (for example, `PER_MONTH` or `PER_COUNT`).
	Unit *string `json:"Unit,omitempty"`
	// The unit price of the catalog entry in the currency of your account, in the ISO-4217 format (for example, `EUR`).
	UnitPrice *float64 `json:"UnitPrice,omitempty"`
}

// NewUnitPriceEntry instantiates a new UnitPriceEntry object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewUnitPriceEntry() *UnitPriceEntry {
	this := UnitPriceEntry{}
	return &this
}

// NewUnitPriceEntryWithDefaults instantiates a new UnitPriceEntry object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewUnitPriceEntryWithDefaults() *UnitPriceEntry {
	this := UnitPriceEntry{}
	return &this
}

// GetCurrency returns the Currency field value if set, zero value otherwise.
func (o *UnitPriceEntry) GetCurrency() string {
	if o == nil || o.Currency == nil {
		var ret string
		return ret
	}
	return *o.Currency
}

// GetCurrencyOk returns a tuple with the Currency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitPriceEntry) GetCurrencyOk() (*string, bool) {
	if o == nil || o.Currency == nil {
		return nil, false
	}
	return o.Currency, true
}

// HasCurrency returns a boolean if a field has been set.
func (o *UnitPriceEntry) HasCurrency() bool {
	if o != nil && o.Currency != nil {
		return true
	}

	return false
}

// SetCurrency gets a reference to the given string and assigns it to the Currency field.
func (o *UnitPriceEntry) SetCurrency(v string) {
	o.Currency = &v
}

// GetOperation returns the Operation field value if set, zero value otherwise.
func (o *UnitPriceEntry) GetOperation() string {
	if o == nil || o.Operation == nil {
		var ret string
		return ret
	}
	return *o.Operation
}

// GetOperationOk returns a tuple with the Operation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitPriceEntry) GetOperationOk() (*string, bool) {
	if o == nil || o.Operation == nil {
		return nil, false
	}
	return o.Operation, true
}

// HasOperation returns a boolean if a field has been set.
func (o *UnitPriceEntry) HasOperation() bool {
	if o != nil && o.Operation != nil {
		return true
	}

	return false
}

// SetOperation gets a reference to the given string and assigns it to the Operation field.
func (o *UnitPriceEntry) SetOperation(v string) {
	o.Operation = &v
}

// GetService returns the Service field value if set, zero value otherwise.
func (o *UnitPriceEntry) GetService() string {
	if o == nil || o.Service == nil {
		var ret string
		return ret
	}
	return *o.Service
}

// GetServiceOk returns a tuple with the Service field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitPriceEntry) GetServiceOk() (*string, bool) {
	if o == nil || o.Service == nil {
		return nil, false
	}
	return o.Service, true
}

// HasService returns a boolean if a field has been set.
func (o *UnitPriceEntry) HasService() bool {
	if o != nil && o.Service != nil {
		return true
	}

	return false
}

// SetService gets a reference to the given string and assigns it to the Service field.
func (o *UnitPriceEntry) SetService(v string) {
	o.Service = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *UnitPriceEntry) GetType() string {
	if o == nil || o.Type == nil {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitPriceEntry) GetTypeOk() (*string, bool) {
	if o == nil || o.Type == nil {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *UnitPriceEntry) HasType() bool {
	if o != nil && o.Type != nil {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *UnitPriceEntry) SetType(v string) {
	o.Type = &v
}

// GetUnit returns the Unit field value if set, zero value otherwise.
func (o *UnitPriceEntry) GetUnit() string {
	if o == nil || o.Unit == nil {
		var ret string
		return ret
	}
	return *o.Unit
}

// GetUnitOk returns a tuple with the Unit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitPriceEntry) GetUnitOk() (*string, bool) {
	if o == nil || o.Unit == nil {
		return nil, false
	}
	return o.Unit, true
}

// HasUnit returns a boolean if a field has been set.
func (o *UnitPriceEntry) HasUnit() bool {
	if o != nil && o.Unit != nil {
		return true
	}

	return false
}

// SetUnit gets a reference to the given string and assigns it to the Unit field.
func (o *UnitPriceEntry) SetUnit(v string) {
	o.Unit = &v
}

// GetUnitPrice returns the UnitPrice field value if set, zero value otherwise.
func (o *UnitPriceEntry) GetUnitPrice() float64 {
	if o == nil || o.UnitPrice == nil {
		var ret float64
		return ret
	}
	return *o.UnitPrice
}

// GetUnitPriceOk returns a tuple with the UnitPrice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *UnitPriceEntry) GetUnitPriceOk() (*float64, bool) {
	if o == nil || o.UnitPrice == nil {
		return nil, false
	}
	return o.UnitPrice, true
}

// HasUnitPrice returns a boolean if a field has been set.
func (o *UnitPriceEntry) HasUnitPrice() bool {
	if o != nil && o.UnitPrice != nil {
		return true
	}

	return false
}

// SetUnitPrice gets a reference to the given float64 and assigns it to the UnitPrice field.
func (o *UnitPriceEntry) SetUnitPrice(v float64) {
	o.UnitPrice = &v
}

func (o UnitPriceEntry) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Currency != nil {
		toSerialize["Currency"] = o.Currency
	}
	if o.Operation != nil {
		toSerialize["Operation"] = o.Operation
	}
	if o.Service != nil {
		toSerialize["Service"] = o.Service
	}
	if o.Type != nil {
		toSerialize["Type"] = o.Type
	}
	if o.Unit != nil {
		toSerialize["Unit"] = o.Unit
	}
	if o.UnitPrice != nil {
		toSerialize["UnitPrice"] = o.UnitPrice
	}
	return json.Marshal(toSerialize)
}

type NullableUnitPriceEntry struct {
	value *UnitPriceEntry
	isSet bool
}

func (v NullableUnitPriceEntry) Get() *UnitPriceEntry {
	return v.value
}

func (v *NullableUnitPriceEntry) Set(val *UnitPriceEntry) {
	v.value = val
	v.isSet = true
}

func (v NullableUnitPriceEntry) IsSet() bool {
	return v.isSet
}

func (v *NullableUnitPriceEntry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableUnitPriceEntry(val *UnitPriceEntry) *NullableUnitPriceEntry {
	return &NullableUnitPriceEntry{value: val, isSet: true}
}

func (v NullableUnitPriceEntry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableUnitPriceEntry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
