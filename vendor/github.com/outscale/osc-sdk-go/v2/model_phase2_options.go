/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * API version: 1.35.3
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// Phase2Options Information about Phase 2 of the Internet Key Exchange (IKE) negotiation.
type Phase2Options struct {
	// The Diffie-Hellman (DH) group numbers allowed for the VPN tunnel for phase 2.
	Phase2DhGroupNumbers *[]int32 `json:"Phase2DhGroupNumbers,omitempty"`
	// The encryption algorithms allowed for the VPN tunnel for phase 2.
	Phase2EncryptionAlgorithms *[]string `json:"Phase2EncryptionAlgorithms,omitempty"`
	// The integrity algorithms allowed for the VPN tunnel for phase 2.
	Phase2IntegrityAlgorithms *[]string `json:"Phase2IntegrityAlgorithms,omitempty"`
	// The lifetime for phase 2 of the Internet Key Exchange (IKE) negotiation process, in seconds.
	Phase2LifetimeSeconds *int32 `json:"Phase2LifetimeSeconds,omitempty"`
	// The pre-shared key to establish the initial authentication between the client gateway and the virtual gateway. This key can contain any character except line breaks and double quotes (&quot;).
	PreSharedKey *string `json:"PreSharedKey,omitempty"`
}

// NewPhase2Options instantiates a new Phase2Options object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPhase2Options() *Phase2Options {
	this := Phase2Options{}
	return &this
}

// NewPhase2OptionsWithDefaults instantiates a new Phase2Options object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPhase2OptionsWithDefaults() *Phase2Options {
	this := Phase2Options{}
	return &this
}

// GetPhase2DhGroupNumbers returns the Phase2DhGroupNumbers field value if set, zero value otherwise.
func (o *Phase2Options) GetPhase2DhGroupNumbers() []int32 {
	if o == nil || o.Phase2DhGroupNumbers == nil {
		var ret []int32
		return ret
	}
	return *o.Phase2DhGroupNumbers
}

// GetPhase2DhGroupNumbersOk returns a tuple with the Phase2DhGroupNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase2Options) GetPhase2DhGroupNumbersOk() (*[]int32, bool) {
	if o == nil || o.Phase2DhGroupNumbers == nil {
		return nil, false
	}
	return o.Phase2DhGroupNumbers, true
}

// HasPhase2DhGroupNumbers returns a boolean if a field has been set.
func (o *Phase2Options) HasPhase2DhGroupNumbers() bool {
	if o != nil && o.Phase2DhGroupNumbers != nil {
		return true
	}

	return false
}

// SetPhase2DhGroupNumbers gets a reference to the given []int32 and assigns it to the Phase2DhGroupNumbers field.
func (o *Phase2Options) SetPhase2DhGroupNumbers(v []int32) {
	o.Phase2DhGroupNumbers = &v
}

// GetPhase2EncryptionAlgorithms returns the Phase2EncryptionAlgorithms field value if set, zero value otherwise.
func (o *Phase2Options) GetPhase2EncryptionAlgorithms() []string {
	if o == nil || o.Phase2EncryptionAlgorithms == nil {
		var ret []string
		return ret
	}
	return *o.Phase2EncryptionAlgorithms
}

// GetPhase2EncryptionAlgorithmsOk returns a tuple with the Phase2EncryptionAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase2Options) GetPhase2EncryptionAlgorithmsOk() (*[]string, bool) {
	if o == nil || o.Phase2EncryptionAlgorithms == nil {
		return nil, false
	}
	return o.Phase2EncryptionAlgorithms, true
}

// HasPhase2EncryptionAlgorithms returns a boolean if a field has been set.
func (o *Phase2Options) HasPhase2EncryptionAlgorithms() bool {
	if o != nil && o.Phase2EncryptionAlgorithms != nil {
		return true
	}

	return false
}

// SetPhase2EncryptionAlgorithms gets a reference to the given []string and assigns it to the Phase2EncryptionAlgorithms field.
func (o *Phase2Options) SetPhase2EncryptionAlgorithms(v []string) {
	o.Phase2EncryptionAlgorithms = &v
}

// GetPhase2IntegrityAlgorithms returns the Phase2IntegrityAlgorithms field value if set, zero value otherwise.
func (o *Phase2Options) GetPhase2IntegrityAlgorithms() []string {
	if o == nil || o.Phase2IntegrityAlgorithms == nil {
		var ret []string
		return ret
	}
	return *o.Phase2IntegrityAlgorithms
}

// GetPhase2IntegrityAlgorithmsOk returns a tuple with the Phase2IntegrityAlgorithms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase2Options) GetPhase2IntegrityAlgorithmsOk() (*[]string, bool) {
	if o == nil || o.Phase2IntegrityAlgorithms == nil {
		return nil, false
	}
	return o.Phase2IntegrityAlgorithms, true
}

// HasPhase2IntegrityAlgorithms returns a boolean if a field has been set.
func (o *Phase2Options) HasPhase2IntegrityAlgorithms() bool {
	if o != nil && o.Phase2IntegrityAlgorithms != nil {
		return true
	}

	return false
}

// SetPhase2IntegrityAlgorithms gets a reference to the given []string and assigns it to the Phase2IntegrityAlgorithms field.
func (o *Phase2Options) SetPhase2IntegrityAlgorithms(v []string) {
	o.Phase2IntegrityAlgorithms = &v
}

// GetPhase2LifetimeSeconds returns the Phase2LifetimeSeconds field value if set, zero value otherwise.
func (o *Phase2Options) GetPhase2LifetimeSeconds() int32 {
	if o == nil || o.Phase2LifetimeSeconds == nil {
		var ret int32
		return ret
	}
	return *o.Phase2LifetimeSeconds
}

// GetPhase2LifetimeSecondsOk returns a tuple with the Phase2LifetimeSeconds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase2Options) GetPhase2LifetimeSecondsOk() (*int32, bool) {
	if o == nil || o.Phase2LifetimeSeconds == nil {
		return nil, false
	}
	return o.Phase2LifetimeSeconds, true
}

// HasPhase2LifetimeSeconds returns a boolean if a field has been set.
func (o *Phase2Options) HasPhase2LifetimeSeconds() bool {
	if o != nil && o.Phase2LifetimeSeconds != nil {
		return true
	}

	return false
}

// SetPhase2LifetimeSeconds gets a reference to the given int32 and assigns it to the Phase2LifetimeSeconds field.
func (o *Phase2Options) SetPhase2LifetimeSeconds(v int32) {
	o.Phase2LifetimeSeconds = &v
}

// GetPreSharedKey returns the PreSharedKey field value if set, zero value otherwise.
func (o *Phase2Options) GetPreSharedKey() string {
	if o == nil || o.PreSharedKey == nil {
		var ret string
		return ret
	}
	return *o.PreSharedKey
}

// GetPreSharedKeyOk returns a tuple with the PreSharedKey field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Phase2Options) GetPreSharedKeyOk() (*string, bool) {
	if o == nil || o.PreSharedKey == nil {
		return nil, false
	}
	return o.PreSharedKey, true
}

// HasPreSharedKey returns a boolean if a field has been set.
func (o *Phase2Options) HasPreSharedKey() bool {
	if o != nil && o.PreSharedKey != nil {
		return true
	}

	return false
}

// SetPreSharedKey gets a reference to the given string and assigns it to the PreSharedKey field.
func (o *Phase2Options) SetPreSharedKey(v string) {
	o.PreSharedKey = &v
}

func (o Phase2Options) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Phase2DhGroupNumbers != nil {
		toSerialize["Phase2DhGroupNumbers"] = o.Phase2DhGroupNumbers
	}
	if o.Phase2EncryptionAlgorithms != nil {
		toSerialize["Phase2EncryptionAlgorithms"] = o.Phase2EncryptionAlgorithms
	}
	if o.Phase2IntegrityAlgorithms != nil {
		toSerialize["Phase2IntegrityAlgorithms"] = o.Phase2IntegrityAlgorithms
	}
	if o.Phase2LifetimeSeconds != nil {
		toSerialize["Phase2LifetimeSeconds"] = o.Phase2LifetimeSeconds
	}
	if o.PreSharedKey != nil {
		toSerialize["PreSharedKey"] = o.PreSharedKey
	}
	return json.Marshal(toSerialize)
}

type NullablePhase2Options struct {
	value *Phase2Options
	isSet bool
}

func (v NullablePhase2Options) Get() *Phase2Options {
	return v.value
}

func (v *NullablePhase2Options) Set(val *Phase2Options) {
	v.value = val
	v.isSet = true
}

func (v NullablePhase2Options) IsSet() bool {
	return v.isSet
}

func (v *NullablePhase2Options) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePhase2Options(val *Phase2Options) *NullablePhase2Options {
	return &NullablePhase2Options{value: val, isSet: true}
}

func (v NullablePhase2Options) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePhase2Options) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
