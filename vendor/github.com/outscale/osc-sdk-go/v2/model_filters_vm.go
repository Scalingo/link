/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * API version: 1.35.3
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// FiltersVm One or more filters.
type FiltersVm struct {
	// The architectures of the VMs (`i386` \\| `x86_64`).
	Architectures *[]string `json:"Architectures,omitempty"`
	// Whether the BSU volumes are deleted when terminating the VMs.
	BlockDeviceMappingDeleteOnVmDeletion *bool `json:"BlockDeviceMappingDeleteOnVmDeletion,omitempty"`
	// The device names for the BSU volumes (in the format `/dev/sdX`, `/dev/sdXX`, `/dev/xvdX`, or `/dev/xvdXX`).
	BlockDeviceMappingDeviceNames *[]string `json:"BlockDeviceMappingDeviceNames,omitempty"`
	// The link dates for the BSU volumes mapped to the VMs (for example, `2016-01-23T18:45:30.000Z`).
	BlockDeviceMappingLinkDates *[]string `json:"BlockDeviceMappingLinkDates,omitempty"`
	// The states for the BSU volumes (`attaching` \\| `attached` \\| `detaching` \\| `detached`).
	BlockDeviceMappingStates *[]string `json:"BlockDeviceMappingStates,omitempty"`
	// The volume IDs of the BSU volumes.
	BlockDeviceMappingVolumeIds *[]string `json:"BlockDeviceMappingVolumeIds,omitempty"`
	// The boot modes of the VMs (`legacy` \\| `uefi`).
	BootModes *[]BootMode `json:"BootModes,omitempty"`
	// The idempotency tokens provided when launching the VMs.
	ClientTokens *[]string `json:"ClientTokens,omitempty"`
	// The dates when the VMs were launched.
	CreationDates *[]string `json:"CreationDates,omitempty"`
	// The IDs of the OMIs used to launch the VMs.
	ImageIds *[]string `json:"ImageIds,omitempty"`
	// Whether the source/destination checking is enabled (true) or disabled (false).
	IsSourceDestChecked *bool `json:"IsSourceDestChecked,omitempty"`
	// The names of the keypairs used when launching the VMs.
	KeypairNames *[]string `json:"KeypairNames,omitempty"`
	// The numbers for the VMs when launching a group of several VMs (for example, `0`, `1`, `2`, and so on).
	LaunchNumbers *[]int32 `json:"LaunchNumbers,omitempty"`
	// Whether the VMs are Spot Instances (spot).
	Lifecycles *[]string `json:"Lifecycles,omitempty"`
	// The IDs of the Nets in which the VMs are running.
	NetIds *[]string `json:"NetIds,omitempty"`
	// The IDs of the NICs.
	NicAccountIds *[]string `json:"NicAccountIds,omitempty"`
	// The descriptions of the NICs.
	NicDescriptions *[]string `json:"NicDescriptions,omitempty"`
	// Whether the source/destination checking is enabled (true) or disabled (false).
	NicIsSourceDestChecked *bool `json:"NicIsSourceDestChecked,omitempty"`
	// Whether the NICs are deleted when the VMs they are attached to are deleted.
	NicLinkNicDeleteOnVmDeletion *bool `json:"NicLinkNicDeleteOnVmDeletion,omitempty"`
	// The device numbers the NICs are attached to.
	NicLinkNicDeviceNumbers *[]int32 `json:"NicLinkNicDeviceNumbers,omitempty"`
	// The dates and times (UTC) when the NICs were attached to the VMs.
	NicLinkNicLinkNicDates *[]string `json:"NicLinkNicLinkNicDates,omitempty"`
	// The IDs of the NIC attachments.
	NicLinkNicLinkNicIds *[]string `json:"NicLinkNicLinkNicIds,omitempty"`
	// The states of the attachments.
	NicLinkNicStates *[]string `json:"NicLinkNicStates,omitempty"`
	// The account IDs of the owners of the VMs the NICs are attached to.
	NicLinkNicVmAccountIds *[]string `json:"NicLinkNicVmAccountIds,omitempty"`
	// The IDs of the VMs the NICs are attached to.
	NicLinkNicVmIds *[]string `json:"NicLinkNicVmIds,omitempty"`
	// The account IDs of the owners of the public IPs associated with the NICs.
	NicLinkPublicIpAccountIds *[]string `json:"NicLinkPublicIpAccountIds,omitempty"`
	// The association IDs returned when the public IPs were associated with the NICs.
	NicLinkPublicIpLinkPublicIpIds *[]string `json:"NicLinkPublicIpLinkPublicIpIds,omitempty"`
	// The allocation IDs returned when the public IPs were allocated to their accounts.
	NicLinkPublicIpPublicIpIds *[]string `json:"NicLinkPublicIpPublicIpIds,omitempty"`
	// The public IPs associated with the NICs.
	NicLinkPublicIpPublicIps *[]string `json:"NicLinkPublicIpPublicIps,omitempty"`
	// The Media Access Control (MAC) addresses of the NICs.
	NicMacAddresses *[]string `json:"NicMacAddresses,omitempty"`
	// The IDs of the Nets where the NICs are located.
	NicNetIds *[]string `json:"NicNetIds,omitempty"`
	// The IDs of the NICs.
	NicNicIds *[]string `json:"NicNicIds,omitempty"`
	// The account IDs of the owner of the public IPs associated with the private IPs.
	NicPrivateIpsLinkPublicIpAccountIds *[]string `json:"NicPrivateIpsLinkPublicIpAccountIds,omitempty"`
	// The public IPs associated with the private IPs.
	NicPrivateIpsLinkPublicIpIds *[]string `json:"NicPrivateIpsLinkPublicIpIds,omitempty"`
	// Whether the private IPs are the primary IPs associated with the NICs.
	NicPrivateIpsPrimaryIp *bool `json:"NicPrivateIpsPrimaryIp,omitempty"`
	// The private IPs of the NICs.
	NicPrivateIpsPrivateIps *[]string `json:"NicPrivateIpsPrivateIps,omitempty"`
	// The IDs of the security groups associated with the NICs.
	NicSecurityGroupIds *[]string `json:"NicSecurityGroupIds,omitempty"`
	// The names of the security groups associated with the NICs.
	NicSecurityGroupNames *[]string `json:"NicSecurityGroupNames,omitempty"`
	// The states of the NICs (`available` \\| `in-use`).
	NicStates *[]string `json:"NicStates,omitempty"`
	// The IDs of the Subnets for the NICs.
	NicSubnetIds *[]string `json:"NicSubnetIds,omitempty"`
	// The Subregions where the NICs are located.
	NicSubregionNames *[]string `json:"NicSubregionNames,omitempty"`
	// The platforms. Use windows if you have Windows VMs. Otherwise, leave this filter blank.
	Platforms *[]string `json:"Platforms,omitempty"`
	// The private IPs of the VMs.
	PrivateIps *[]string `json:"PrivateIps,omitempty"`
	// The product codes associated with the OMI used to create the VMs.
	ProductCodes *[]string `json:"ProductCodes,omitempty"`
	// The public IPs of the VMs.
	PublicIps *[]string `json:"PublicIps,omitempty"`
	// The IDs of the reservation of the VMs, created every time you launch VMs. These reservation IDs can be associated with several VMs when you launch a group of VMs using the same launch request.
	ReservationIds *[]string `json:"ReservationIds,omitempty"`
	// The names of the root devices for the VMs (for example, `/dev/sda1`)
	RootDeviceNames *[]string `json:"RootDeviceNames,omitempty"`
	// The root devices types used by the VMs (always `ebs`)
	RootDeviceTypes *[]string `json:"RootDeviceTypes,omitempty"`
	// The IDs of the security groups for the VMs (only in the public Cloud).
	SecurityGroupIds *[]string `json:"SecurityGroupIds,omitempty"`
	// The names of the security groups for the VMs (only in the public Cloud).
	SecurityGroupNames *[]string `json:"SecurityGroupNames,omitempty"`
	// The reason codes for the state changes.
	StateReasonCodes *[]int32 `json:"StateReasonCodes,omitempty"`
	// The messages describing the state changes.
	StateReasonMessages *[]string `json:"StateReasonMessages,omitempty"`
	// The reasons explaining the current states of the VMs. This filter is like the `StateReasonCodes` one.
	StateReasons *[]string `json:"StateReasons,omitempty"`
	// The IDs of the Subnets for the VMs.
	SubnetIds *[]string `json:"SubnetIds,omitempty"`
	// The names of the Subregions of the VMs.
	SubregionNames *[]string `json:"SubregionNames,omitempty"`
	// The keys of the tags associated with the VMs.
	TagKeys *[]string `json:"TagKeys,omitempty"`
	// The values of the tags associated with the VMs.
	TagValues *[]string `json:"TagValues,omitempty"`
	// The key/value combination of the tags associated with the VMs, in the following format: &quot;Filters&quot;:{&quot;Tags&quot;:[&quot;TAGKEY=TAGVALUE&quot;]}.
	Tags *[]string `json:"Tags,omitempty"`
	// The tenancies of the VMs (`dedicated` \\| `default` \\| `host`).
	Tenancies *[]string `json:"Tenancies,omitempty"`
	// One or more IDs of VMs.
	VmIds *[]string `json:"VmIds,omitempty"`
	// The IDs of the security groups for the VMs.
	VmSecurityGroupIds *[]string `json:"VmSecurityGroupIds,omitempty"`
	// The names of the security group for the VMs.
	VmSecurityGroupNames *[]string `json:"VmSecurityGroupNames,omitempty"`
	// The state codes of the VMs: `-1` (quarantine), `0` (pending), `16` (running), `32` (shutting-down), `48` (terminated), `64` (stopping), and `80` (stopped).
	VmStateCodes *[]int32 `json:"VmStateCodes,omitempty"`
	// The state names of the VMs (`pending` \\| `running` \\| `stopping` \\| `stopped` \\| `shutting-down` \\| `terminated` \\| `quarantine`).
	VmStateNames *[]string `json:"VmStateNames,omitempty"`
	// The VM types (for example, t2.micro). For more information, see [VM Types](https://docs.outscale.com/en/userguide/VM-Types.html).
	VmTypes *[]string `json:"VmTypes,omitempty"`
}

// NewFiltersVm instantiates a new FiltersVm object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewFiltersVm() *FiltersVm {
	this := FiltersVm{}
	return &this
}

// NewFiltersVmWithDefaults instantiates a new FiltersVm object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewFiltersVmWithDefaults() *FiltersVm {
	this := FiltersVm{}
	return &this
}

// GetArchitectures returns the Architectures field value if set, zero value otherwise.
func (o *FiltersVm) GetArchitectures() []string {
	if o == nil || o.Architectures == nil {
		var ret []string
		return ret
	}
	return *o.Architectures
}

// GetArchitecturesOk returns a tuple with the Architectures field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetArchitecturesOk() (*[]string, bool) {
	if o == nil || o.Architectures == nil {
		return nil, false
	}
	return o.Architectures, true
}

// HasArchitectures returns a boolean if a field has been set.
func (o *FiltersVm) HasArchitectures() bool {
	if o != nil && o.Architectures != nil {
		return true
	}

	return false
}

// SetArchitectures gets a reference to the given []string and assigns it to the Architectures field.
func (o *FiltersVm) SetArchitectures(v []string) {
	o.Architectures = &v
}

// GetBlockDeviceMappingDeleteOnVmDeletion returns the BlockDeviceMappingDeleteOnVmDeletion field value if set, zero value otherwise.
func (o *FiltersVm) GetBlockDeviceMappingDeleteOnVmDeletion() bool {
	if o == nil || o.BlockDeviceMappingDeleteOnVmDeletion == nil {
		var ret bool
		return ret
	}
	return *o.BlockDeviceMappingDeleteOnVmDeletion
}

// GetBlockDeviceMappingDeleteOnVmDeletionOk returns a tuple with the BlockDeviceMappingDeleteOnVmDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetBlockDeviceMappingDeleteOnVmDeletionOk() (*bool, bool) {
	if o == nil || o.BlockDeviceMappingDeleteOnVmDeletion == nil {
		return nil, false
	}
	return o.BlockDeviceMappingDeleteOnVmDeletion, true
}

// HasBlockDeviceMappingDeleteOnVmDeletion returns a boolean if a field has been set.
func (o *FiltersVm) HasBlockDeviceMappingDeleteOnVmDeletion() bool {
	if o != nil && o.BlockDeviceMappingDeleteOnVmDeletion != nil {
		return true
	}

	return false
}

// SetBlockDeviceMappingDeleteOnVmDeletion gets a reference to the given bool and assigns it to the BlockDeviceMappingDeleteOnVmDeletion field.
func (o *FiltersVm) SetBlockDeviceMappingDeleteOnVmDeletion(v bool) {
	o.BlockDeviceMappingDeleteOnVmDeletion = &v
}

// GetBlockDeviceMappingDeviceNames returns the BlockDeviceMappingDeviceNames field value if set, zero value otherwise.
func (o *FiltersVm) GetBlockDeviceMappingDeviceNames() []string {
	if o == nil || o.BlockDeviceMappingDeviceNames == nil {
		var ret []string
		return ret
	}
	return *o.BlockDeviceMappingDeviceNames
}

// GetBlockDeviceMappingDeviceNamesOk returns a tuple with the BlockDeviceMappingDeviceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetBlockDeviceMappingDeviceNamesOk() (*[]string, bool) {
	if o == nil || o.BlockDeviceMappingDeviceNames == nil {
		return nil, false
	}
	return o.BlockDeviceMappingDeviceNames, true
}

// HasBlockDeviceMappingDeviceNames returns a boolean if a field has been set.
func (o *FiltersVm) HasBlockDeviceMappingDeviceNames() bool {
	if o != nil && o.BlockDeviceMappingDeviceNames != nil {
		return true
	}

	return false
}

// SetBlockDeviceMappingDeviceNames gets a reference to the given []string and assigns it to the BlockDeviceMappingDeviceNames field.
func (o *FiltersVm) SetBlockDeviceMappingDeviceNames(v []string) {
	o.BlockDeviceMappingDeviceNames = &v
}

// GetBlockDeviceMappingLinkDates returns the BlockDeviceMappingLinkDates field value if set, zero value otherwise.
func (o *FiltersVm) GetBlockDeviceMappingLinkDates() []string {
	if o == nil || o.BlockDeviceMappingLinkDates == nil {
		var ret []string
		return ret
	}
	return *o.BlockDeviceMappingLinkDates
}

// GetBlockDeviceMappingLinkDatesOk returns a tuple with the BlockDeviceMappingLinkDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetBlockDeviceMappingLinkDatesOk() (*[]string, bool) {
	if o == nil || o.BlockDeviceMappingLinkDates == nil {
		return nil, false
	}
	return o.BlockDeviceMappingLinkDates, true
}

// HasBlockDeviceMappingLinkDates returns a boolean if a field has been set.
func (o *FiltersVm) HasBlockDeviceMappingLinkDates() bool {
	if o != nil && o.BlockDeviceMappingLinkDates != nil {
		return true
	}

	return false
}

// SetBlockDeviceMappingLinkDates gets a reference to the given []string and assigns it to the BlockDeviceMappingLinkDates field.
func (o *FiltersVm) SetBlockDeviceMappingLinkDates(v []string) {
	o.BlockDeviceMappingLinkDates = &v
}

// GetBlockDeviceMappingStates returns the BlockDeviceMappingStates field value if set, zero value otherwise.
func (o *FiltersVm) GetBlockDeviceMappingStates() []string {
	if o == nil || o.BlockDeviceMappingStates == nil {
		var ret []string
		return ret
	}
	return *o.BlockDeviceMappingStates
}

// GetBlockDeviceMappingStatesOk returns a tuple with the BlockDeviceMappingStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetBlockDeviceMappingStatesOk() (*[]string, bool) {
	if o == nil || o.BlockDeviceMappingStates == nil {
		return nil, false
	}
	return o.BlockDeviceMappingStates, true
}

// HasBlockDeviceMappingStates returns a boolean if a field has been set.
func (o *FiltersVm) HasBlockDeviceMappingStates() bool {
	if o != nil && o.BlockDeviceMappingStates != nil {
		return true
	}

	return false
}

// SetBlockDeviceMappingStates gets a reference to the given []string and assigns it to the BlockDeviceMappingStates field.
func (o *FiltersVm) SetBlockDeviceMappingStates(v []string) {
	o.BlockDeviceMappingStates = &v
}

// GetBlockDeviceMappingVolumeIds returns the BlockDeviceMappingVolumeIds field value if set, zero value otherwise.
func (o *FiltersVm) GetBlockDeviceMappingVolumeIds() []string {
	if o == nil || o.BlockDeviceMappingVolumeIds == nil {
		var ret []string
		return ret
	}
	return *o.BlockDeviceMappingVolumeIds
}

// GetBlockDeviceMappingVolumeIdsOk returns a tuple with the BlockDeviceMappingVolumeIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetBlockDeviceMappingVolumeIdsOk() (*[]string, bool) {
	if o == nil || o.BlockDeviceMappingVolumeIds == nil {
		return nil, false
	}
	return o.BlockDeviceMappingVolumeIds, true
}

// HasBlockDeviceMappingVolumeIds returns a boolean if a field has been set.
func (o *FiltersVm) HasBlockDeviceMappingVolumeIds() bool {
	if o != nil && o.BlockDeviceMappingVolumeIds != nil {
		return true
	}

	return false
}

// SetBlockDeviceMappingVolumeIds gets a reference to the given []string and assigns it to the BlockDeviceMappingVolumeIds field.
func (o *FiltersVm) SetBlockDeviceMappingVolumeIds(v []string) {
	o.BlockDeviceMappingVolumeIds = &v
}

// GetBootModes returns the BootModes field value if set, zero value otherwise.
func (o *FiltersVm) GetBootModes() []BootMode {
	if o == nil || o.BootModes == nil {
		var ret []BootMode
		return ret
	}
	return *o.BootModes
}

// GetBootModesOk returns a tuple with the BootModes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetBootModesOk() (*[]BootMode, bool) {
	if o == nil || o.BootModes == nil {
		return nil, false
	}
	return o.BootModes, true
}

// HasBootModes returns a boolean if a field has been set.
func (o *FiltersVm) HasBootModes() bool {
	if o != nil && o.BootModes != nil {
		return true
	}

	return false
}

// SetBootModes gets a reference to the given []BootMode and assigns it to the BootModes field.
func (o *FiltersVm) SetBootModes(v []BootMode) {
	o.BootModes = &v
}

// GetClientTokens returns the ClientTokens field value if set, zero value otherwise.
func (o *FiltersVm) GetClientTokens() []string {
	if o == nil || o.ClientTokens == nil {
		var ret []string
		return ret
	}
	return *o.ClientTokens
}

// GetClientTokensOk returns a tuple with the ClientTokens field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetClientTokensOk() (*[]string, bool) {
	if o == nil || o.ClientTokens == nil {
		return nil, false
	}
	return o.ClientTokens, true
}

// HasClientTokens returns a boolean if a field has been set.
func (o *FiltersVm) HasClientTokens() bool {
	if o != nil && o.ClientTokens != nil {
		return true
	}

	return false
}

// SetClientTokens gets a reference to the given []string and assigns it to the ClientTokens field.
func (o *FiltersVm) SetClientTokens(v []string) {
	o.ClientTokens = &v
}

// GetCreationDates returns the CreationDates field value if set, zero value otherwise.
func (o *FiltersVm) GetCreationDates() []string {
	if o == nil || o.CreationDates == nil {
		var ret []string
		return ret
	}
	return *o.CreationDates
}

// GetCreationDatesOk returns a tuple with the CreationDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetCreationDatesOk() (*[]string, bool) {
	if o == nil || o.CreationDates == nil {
		return nil, false
	}
	return o.CreationDates, true
}

// HasCreationDates returns a boolean if a field has been set.
func (o *FiltersVm) HasCreationDates() bool {
	if o != nil && o.CreationDates != nil {
		return true
	}

	return false
}

// SetCreationDates gets a reference to the given []string and assigns it to the CreationDates field.
func (o *FiltersVm) SetCreationDates(v []string) {
	o.CreationDates = &v
}

// GetImageIds returns the ImageIds field value if set, zero value otherwise.
func (o *FiltersVm) GetImageIds() []string {
	if o == nil || o.ImageIds == nil {
		var ret []string
		return ret
	}
	return *o.ImageIds
}

// GetImageIdsOk returns a tuple with the ImageIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetImageIdsOk() (*[]string, bool) {
	if o == nil || o.ImageIds == nil {
		return nil, false
	}
	return o.ImageIds, true
}

// HasImageIds returns a boolean if a field has been set.
func (o *FiltersVm) HasImageIds() bool {
	if o != nil && o.ImageIds != nil {
		return true
	}

	return false
}

// SetImageIds gets a reference to the given []string and assigns it to the ImageIds field.
func (o *FiltersVm) SetImageIds(v []string) {
	o.ImageIds = &v
}

// GetIsSourceDestChecked returns the IsSourceDestChecked field value if set, zero value otherwise.
func (o *FiltersVm) GetIsSourceDestChecked() bool {
	if o == nil || o.IsSourceDestChecked == nil {
		var ret bool
		return ret
	}
	return *o.IsSourceDestChecked
}

// GetIsSourceDestCheckedOk returns a tuple with the IsSourceDestChecked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetIsSourceDestCheckedOk() (*bool, bool) {
	if o == nil || o.IsSourceDestChecked == nil {
		return nil, false
	}
	return o.IsSourceDestChecked, true
}

// HasIsSourceDestChecked returns a boolean if a field has been set.
func (o *FiltersVm) HasIsSourceDestChecked() bool {
	if o != nil && o.IsSourceDestChecked != nil {
		return true
	}

	return false
}

// SetIsSourceDestChecked gets a reference to the given bool and assigns it to the IsSourceDestChecked field.
func (o *FiltersVm) SetIsSourceDestChecked(v bool) {
	o.IsSourceDestChecked = &v
}

// GetKeypairNames returns the KeypairNames field value if set, zero value otherwise.
func (o *FiltersVm) GetKeypairNames() []string {
	if o == nil || o.KeypairNames == nil {
		var ret []string
		return ret
	}
	return *o.KeypairNames
}

// GetKeypairNamesOk returns a tuple with the KeypairNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetKeypairNamesOk() (*[]string, bool) {
	if o == nil || o.KeypairNames == nil {
		return nil, false
	}
	return o.KeypairNames, true
}

// HasKeypairNames returns a boolean if a field has been set.
func (o *FiltersVm) HasKeypairNames() bool {
	if o != nil && o.KeypairNames != nil {
		return true
	}

	return false
}

// SetKeypairNames gets a reference to the given []string and assigns it to the KeypairNames field.
func (o *FiltersVm) SetKeypairNames(v []string) {
	o.KeypairNames = &v
}

// GetLaunchNumbers returns the LaunchNumbers field value if set, zero value otherwise.
func (o *FiltersVm) GetLaunchNumbers() []int32 {
	if o == nil || o.LaunchNumbers == nil {
		var ret []int32
		return ret
	}
	return *o.LaunchNumbers
}

// GetLaunchNumbersOk returns a tuple with the LaunchNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetLaunchNumbersOk() (*[]int32, bool) {
	if o == nil || o.LaunchNumbers == nil {
		return nil, false
	}
	return o.LaunchNumbers, true
}

// HasLaunchNumbers returns a boolean if a field has been set.
func (o *FiltersVm) HasLaunchNumbers() bool {
	if o != nil && o.LaunchNumbers != nil {
		return true
	}

	return false
}

// SetLaunchNumbers gets a reference to the given []int32 and assigns it to the LaunchNumbers field.
func (o *FiltersVm) SetLaunchNumbers(v []int32) {
	o.LaunchNumbers = &v
}

// GetLifecycles returns the Lifecycles field value if set, zero value otherwise.
func (o *FiltersVm) GetLifecycles() []string {
	if o == nil || o.Lifecycles == nil {
		var ret []string
		return ret
	}
	return *o.Lifecycles
}

// GetLifecyclesOk returns a tuple with the Lifecycles field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetLifecyclesOk() (*[]string, bool) {
	if o == nil || o.Lifecycles == nil {
		return nil, false
	}
	return o.Lifecycles, true
}

// HasLifecycles returns a boolean if a field has been set.
func (o *FiltersVm) HasLifecycles() bool {
	if o != nil && o.Lifecycles != nil {
		return true
	}

	return false
}

// SetLifecycles gets a reference to the given []string and assigns it to the Lifecycles field.
func (o *FiltersVm) SetLifecycles(v []string) {
	o.Lifecycles = &v
}

// GetNetIds returns the NetIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNetIds() []string {
	if o == nil || o.NetIds == nil {
		var ret []string
		return ret
	}
	return *o.NetIds
}

// GetNetIdsOk returns a tuple with the NetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNetIdsOk() (*[]string, bool) {
	if o == nil || o.NetIds == nil {
		return nil, false
	}
	return o.NetIds, true
}

// HasNetIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNetIds() bool {
	if o != nil && o.NetIds != nil {
		return true
	}

	return false
}

// SetNetIds gets a reference to the given []string and assigns it to the NetIds field.
func (o *FiltersVm) SetNetIds(v []string) {
	o.NetIds = &v
}

// GetNicAccountIds returns the NicAccountIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicAccountIds() []string {
	if o == nil || o.NicAccountIds == nil {
		var ret []string
		return ret
	}
	return *o.NicAccountIds
}

// GetNicAccountIdsOk returns a tuple with the NicAccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicAccountIdsOk() (*[]string, bool) {
	if o == nil || o.NicAccountIds == nil {
		return nil, false
	}
	return o.NicAccountIds, true
}

// HasNicAccountIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicAccountIds() bool {
	if o != nil && o.NicAccountIds != nil {
		return true
	}

	return false
}

// SetNicAccountIds gets a reference to the given []string and assigns it to the NicAccountIds field.
func (o *FiltersVm) SetNicAccountIds(v []string) {
	o.NicAccountIds = &v
}

// GetNicDescriptions returns the NicDescriptions field value if set, zero value otherwise.
func (o *FiltersVm) GetNicDescriptions() []string {
	if o == nil || o.NicDescriptions == nil {
		var ret []string
		return ret
	}
	return *o.NicDescriptions
}

// GetNicDescriptionsOk returns a tuple with the NicDescriptions field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicDescriptionsOk() (*[]string, bool) {
	if o == nil || o.NicDescriptions == nil {
		return nil, false
	}
	return o.NicDescriptions, true
}

// HasNicDescriptions returns a boolean if a field has been set.
func (o *FiltersVm) HasNicDescriptions() bool {
	if o != nil && o.NicDescriptions != nil {
		return true
	}

	return false
}

// SetNicDescriptions gets a reference to the given []string and assigns it to the NicDescriptions field.
func (o *FiltersVm) SetNicDescriptions(v []string) {
	o.NicDescriptions = &v
}

// GetNicIsSourceDestChecked returns the NicIsSourceDestChecked field value if set, zero value otherwise.
func (o *FiltersVm) GetNicIsSourceDestChecked() bool {
	if o == nil || o.NicIsSourceDestChecked == nil {
		var ret bool
		return ret
	}
	return *o.NicIsSourceDestChecked
}

// GetNicIsSourceDestCheckedOk returns a tuple with the NicIsSourceDestChecked field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicIsSourceDestCheckedOk() (*bool, bool) {
	if o == nil || o.NicIsSourceDestChecked == nil {
		return nil, false
	}
	return o.NicIsSourceDestChecked, true
}

// HasNicIsSourceDestChecked returns a boolean if a field has been set.
func (o *FiltersVm) HasNicIsSourceDestChecked() bool {
	if o != nil && o.NicIsSourceDestChecked != nil {
		return true
	}

	return false
}

// SetNicIsSourceDestChecked gets a reference to the given bool and assigns it to the NicIsSourceDestChecked field.
func (o *FiltersVm) SetNicIsSourceDestChecked(v bool) {
	o.NicIsSourceDestChecked = &v
}

// GetNicLinkNicDeleteOnVmDeletion returns the NicLinkNicDeleteOnVmDeletion field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkNicDeleteOnVmDeletion() bool {
	if o == nil || o.NicLinkNicDeleteOnVmDeletion == nil {
		var ret bool
		return ret
	}
	return *o.NicLinkNicDeleteOnVmDeletion
}

// GetNicLinkNicDeleteOnVmDeletionOk returns a tuple with the NicLinkNicDeleteOnVmDeletion field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkNicDeleteOnVmDeletionOk() (*bool, bool) {
	if o == nil || o.NicLinkNicDeleteOnVmDeletion == nil {
		return nil, false
	}
	return o.NicLinkNicDeleteOnVmDeletion, true
}

// HasNicLinkNicDeleteOnVmDeletion returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkNicDeleteOnVmDeletion() bool {
	if o != nil && o.NicLinkNicDeleteOnVmDeletion != nil {
		return true
	}

	return false
}

// SetNicLinkNicDeleteOnVmDeletion gets a reference to the given bool and assigns it to the NicLinkNicDeleteOnVmDeletion field.
func (o *FiltersVm) SetNicLinkNicDeleteOnVmDeletion(v bool) {
	o.NicLinkNicDeleteOnVmDeletion = &v
}

// GetNicLinkNicDeviceNumbers returns the NicLinkNicDeviceNumbers field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkNicDeviceNumbers() []int32 {
	if o == nil || o.NicLinkNicDeviceNumbers == nil {
		var ret []int32
		return ret
	}
	return *o.NicLinkNicDeviceNumbers
}

// GetNicLinkNicDeviceNumbersOk returns a tuple with the NicLinkNicDeviceNumbers field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkNicDeviceNumbersOk() (*[]int32, bool) {
	if o == nil || o.NicLinkNicDeviceNumbers == nil {
		return nil, false
	}
	return o.NicLinkNicDeviceNumbers, true
}

// HasNicLinkNicDeviceNumbers returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkNicDeviceNumbers() bool {
	if o != nil && o.NicLinkNicDeviceNumbers != nil {
		return true
	}

	return false
}

// SetNicLinkNicDeviceNumbers gets a reference to the given []int32 and assigns it to the NicLinkNicDeviceNumbers field.
func (o *FiltersVm) SetNicLinkNicDeviceNumbers(v []int32) {
	o.NicLinkNicDeviceNumbers = &v
}

// GetNicLinkNicLinkNicDates returns the NicLinkNicLinkNicDates field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkNicLinkNicDates() []string {
	if o == nil || o.NicLinkNicLinkNicDates == nil {
		var ret []string
		return ret
	}
	return *o.NicLinkNicLinkNicDates
}

// GetNicLinkNicLinkNicDatesOk returns a tuple with the NicLinkNicLinkNicDates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkNicLinkNicDatesOk() (*[]string, bool) {
	if o == nil || o.NicLinkNicLinkNicDates == nil {
		return nil, false
	}
	return o.NicLinkNicLinkNicDates, true
}

// HasNicLinkNicLinkNicDates returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkNicLinkNicDates() bool {
	if o != nil && o.NicLinkNicLinkNicDates != nil {
		return true
	}

	return false
}

// SetNicLinkNicLinkNicDates gets a reference to the given []string and assigns it to the NicLinkNicLinkNicDates field.
func (o *FiltersVm) SetNicLinkNicLinkNicDates(v []string) {
	o.NicLinkNicLinkNicDates = &v
}

// GetNicLinkNicLinkNicIds returns the NicLinkNicLinkNicIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkNicLinkNicIds() []string {
	if o == nil || o.NicLinkNicLinkNicIds == nil {
		var ret []string
		return ret
	}
	return *o.NicLinkNicLinkNicIds
}

// GetNicLinkNicLinkNicIdsOk returns a tuple with the NicLinkNicLinkNicIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkNicLinkNicIdsOk() (*[]string, bool) {
	if o == nil || o.NicLinkNicLinkNicIds == nil {
		return nil, false
	}
	return o.NicLinkNicLinkNicIds, true
}

// HasNicLinkNicLinkNicIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkNicLinkNicIds() bool {
	if o != nil && o.NicLinkNicLinkNicIds != nil {
		return true
	}

	return false
}

// SetNicLinkNicLinkNicIds gets a reference to the given []string and assigns it to the NicLinkNicLinkNicIds field.
func (o *FiltersVm) SetNicLinkNicLinkNicIds(v []string) {
	o.NicLinkNicLinkNicIds = &v
}

// GetNicLinkNicStates returns the NicLinkNicStates field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkNicStates() []string {
	if o == nil || o.NicLinkNicStates == nil {
		var ret []string
		return ret
	}
	return *o.NicLinkNicStates
}

// GetNicLinkNicStatesOk returns a tuple with the NicLinkNicStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkNicStatesOk() (*[]string, bool) {
	if o == nil || o.NicLinkNicStates == nil {
		return nil, false
	}
	return o.NicLinkNicStates, true
}

// HasNicLinkNicStates returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkNicStates() bool {
	if o != nil && o.NicLinkNicStates != nil {
		return true
	}

	return false
}

// SetNicLinkNicStates gets a reference to the given []string and assigns it to the NicLinkNicStates field.
func (o *FiltersVm) SetNicLinkNicStates(v []string) {
	o.NicLinkNicStates = &v
}

// GetNicLinkNicVmAccountIds returns the NicLinkNicVmAccountIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkNicVmAccountIds() []string {
	if o == nil || o.NicLinkNicVmAccountIds == nil {
		var ret []string
		return ret
	}
	return *o.NicLinkNicVmAccountIds
}

// GetNicLinkNicVmAccountIdsOk returns a tuple with the NicLinkNicVmAccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkNicVmAccountIdsOk() (*[]string, bool) {
	if o == nil || o.NicLinkNicVmAccountIds == nil {
		return nil, false
	}
	return o.NicLinkNicVmAccountIds, true
}

// HasNicLinkNicVmAccountIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkNicVmAccountIds() bool {
	if o != nil && o.NicLinkNicVmAccountIds != nil {
		return true
	}

	return false
}

// SetNicLinkNicVmAccountIds gets a reference to the given []string and assigns it to the NicLinkNicVmAccountIds field.
func (o *FiltersVm) SetNicLinkNicVmAccountIds(v []string) {
	o.NicLinkNicVmAccountIds = &v
}

// GetNicLinkNicVmIds returns the NicLinkNicVmIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkNicVmIds() []string {
	if o == nil || o.NicLinkNicVmIds == nil {
		var ret []string
		return ret
	}
	return *o.NicLinkNicVmIds
}

// GetNicLinkNicVmIdsOk returns a tuple with the NicLinkNicVmIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkNicVmIdsOk() (*[]string, bool) {
	if o == nil || o.NicLinkNicVmIds == nil {
		return nil, false
	}
	return o.NicLinkNicVmIds, true
}

// HasNicLinkNicVmIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkNicVmIds() bool {
	if o != nil && o.NicLinkNicVmIds != nil {
		return true
	}

	return false
}

// SetNicLinkNicVmIds gets a reference to the given []string and assigns it to the NicLinkNicVmIds field.
func (o *FiltersVm) SetNicLinkNicVmIds(v []string) {
	o.NicLinkNicVmIds = &v
}

// GetNicLinkPublicIpAccountIds returns the NicLinkPublicIpAccountIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkPublicIpAccountIds() []string {
	if o == nil || o.NicLinkPublicIpAccountIds == nil {
		var ret []string
		return ret
	}
	return *o.NicLinkPublicIpAccountIds
}

// GetNicLinkPublicIpAccountIdsOk returns a tuple with the NicLinkPublicIpAccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkPublicIpAccountIdsOk() (*[]string, bool) {
	if o == nil || o.NicLinkPublicIpAccountIds == nil {
		return nil, false
	}
	return o.NicLinkPublicIpAccountIds, true
}

// HasNicLinkPublicIpAccountIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkPublicIpAccountIds() bool {
	if o != nil && o.NicLinkPublicIpAccountIds != nil {
		return true
	}

	return false
}

// SetNicLinkPublicIpAccountIds gets a reference to the given []string and assigns it to the NicLinkPublicIpAccountIds field.
func (o *FiltersVm) SetNicLinkPublicIpAccountIds(v []string) {
	o.NicLinkPublicIpAccountIds = &v
}

// GetNicLinkPublicIpLinkPublicIpIds returns the NicLinkPublicIpLinkPublicIpIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkPublicIpLinkPublicIpIds() []string {
	if o == nil || o.NicLinkPublicIpLinkPublicIpIds == nil {
		var ret []string
		return ret
	}
	return *o.NicLinkPublicIpLinkPublicIpIds
}

// GetNicLinkPublicIpLinkPublicIpIdsOk returns a tuple with the NicLinkPublicIpLinkPublicIpIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkPublicIpLinkPublicIpIdsOk() (*[]string, bool) {
	if o == nil || o.NicLinkPublicIpLinkPublicIpIds == nil {
		return nil, false
	}
	return o.NicLinkPublicIpLinkPublicIpIds, true
}

// HasNicLinkPublicIpLinkPublicIpIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkPublicIpLinkPublicIpIds() bool {
	if o != nil && o.NicLinkPublicIpLinkPublicIpIds != nil {
		return true
	}

	return false
}

// SetNicLinkPublicIpLinkPublicIpIds gets a reference to the given []string and assigns it to the NicLinkPublicIpLinkPublicIpIds field.
func (o *FiltersVm) SetNicLinkPublicIpLinkPublicIpIds(v []string) {
	o.NicLinkPublicIpLinkPublicIpIds = &v
}

// GetNicLinkPublicIpPublicIpIds returns the NicLinkPublicIpPublicIpIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkPublicIpPublicIpIds() []string {
	if o == nil || o.NicLinkPublicIpPublicIpIds == nil {
		var ret []string
		return ret
	}
	return *o.NicLinkPublicIpPublicIpIds
}

// GetNicLinkPublicIpPublicIpIdsOk returns a tuple with the NicLinkPublicIpPublicIpIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkPublicIpPublicIpIdsOk() (*[]string, bool) {
	if o == nil || o.NicLinkPublicIpPublicIpIds == nil {
		return nil, false
	}
	return o.NicLinkPublicIpPublicIpIds, true
}

// HasNicLinkPublicIpPublicIpIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkPublicIpPublicIpIds() bool {
	if o != nil && o.NicLinkPublicIpPublicIpIds != nil {
		return true
	}

	return false
}

// SetNicLinkPublicIpPublicIpIds gets a reference to the given []string and assigns it to the NicLinkPublicIpPublicIpIds field.
func (o *FiltersVm) SetNicLinkPublicIpPublicIpIds(v []string) {
	o.NicLinkPublicIpPublicIpIds = &v
}

// GetNicLinkPublicIpPublicIps returns the NicLinkPublicIpPublicIps field value if set, zero value otherwise.
func (o *FiltersVm) GetNicLinkPublicIpPublicIps() []string {
	if o == nil || o.NicLinkPublicIpPublicIps == nil {
		var ret []string
		return ret
	}
	return *o.NicLinkPublicIpPublicIps
}

// GetNicLinkPublicIpPublicIpsOk returns a tuple with the NicLinkPublicIpPublicIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicLinkPublicIpPublicIpsOk() (*[]string, bool) {
	if o == nil || o.NicLinkPublicIpPublicIps == nil {
		return nil, false
	}
	return o.NicLinkPublicIpPublicIps, true
}

// HasNicLinkPublicIpPublicIps returns a boolean if a field has been set.
func (o *FiltersVm) HasNicLinkPublicIpPublicIps() bool {
	if o != nil && o.NicLinkPublicIpPublicIps != nil {
		return true
	}

	return false
}

// SetNicLinkPublicIpPublicIps gets a reference to the given []string and assigns it to the NicLinkPublicIpPublicIps field.
func (o *FiltersVm) SetNicLinkPublicIpPublicIps(v []string) {
	o.NicLinkPublicIpPublicIps = &v
}

// GetNicMacAddresses returns the NicMacAddresses field value if set, zero value otherwise.
func (o *FiltersVm) GetNicMacAddresses() []string {
	if o == nil || o.NicMacAddresses == nil {
		var ret []string
		return ret
	}
	return *o.NicMacAddresses
}

// GetNicMacAddressesOk returns a tuple with the NicMacAddresses field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicMacAddressesOk() (*[]string, bool) {
	if o == nil || o.NicMacAddresses == nil {
		return nil, false
	}
	return o.NicMacAddresses, true
}

// HasNicMacAddresses returns a boolean if a field has been set.
func (o *FiltersVm) HasNicMacAddresses() bool {
	if o != nil && o.NicMacAddresses != nil {
		return true
	}

	return false
}

// SetNicMacAddresses gets a reference to the given []string and assigns it to the NicMacAddresses field.
func (o *FiltersVm) SetNicMacAddresses(v []string) {
	o.NicMacAddresses = &v
}

// GetNicNetIds returns the NicNetIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicNetIds() []string {
	if o == nil || o.NicNetIds == nil {
		var ret []string
		return ret
	}
	return *o.NicNetIds
}

// GetNicNetIdsOk returns a tuple with the NicNetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicNetIdsOk() (*[]string, bool) {
	if o == nil || o.NicNetIds == nil {
		return nil, false
	}
	return o.NicNetIds, true
}

// HasNicNetIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicNetIds() bool {
	if o != nil && o.NicNetIds != nil {
		return true
	}

	return false
}

// SetNicNetIds gets a reference to the given []string and assigns it to the NicNetIds field.
func (o *FiltersVm) SetNicNetIds(v []string) {
	o.NicNetIds = &v
}

// GetNicNicIds returns the NicNicIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicNicIds() []string {
	if o == nil || o.NicNicIds == nil {
		var ret []string
		return ret
	}
	return *o.NicNicIds
}

// GetNicNicIdsOk returns a tuple with the NicNicIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicNicIdsOk() (*[]string, bool) {
	if o == nil || o.NicNicIds == nil {
		return nil, false
	}
	return o.NicNicIds, true
}

// HasNicNicIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicNicIds() bool {
	if o != nil && o.NicNicIds != nil {
		return true
	}

	return false
}

// SetNicNicIds gets a reference to the given []string and assigns it to the NicNicIds field.
func (o *FiltersVm) SetNicNicIds(v []string) {
	o.NicNicIds = &v
}

// GetNicPrivateIpsLinkPublicIpAccountIds returns the NicPrivateIpsLinkPublicIpAccountIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicPrivateIpsLinkPublicIpAccountIds() []string {
	if o == nil || o.NicPrivateIpsLinkPublicIpAccountIds == nil {
		var ret []string
		return ret
	}
	return *o.NicPrivateIpsLinkPublicIpAccountIds
}

// GetNicPrivateIpsLinkPublicIpAccountIdsOk returns a tuple with the NicPrivateIpsLinkPublicIpAccountIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicPrivateIpsLinkPublicIpAccountIdsOk() (*[]string, bool) {
	if o == nil || o.NicPrivateIpsLinkPublicIpAccountIds == nil {
		return nil, false
	}
	return o.NicPrivateIpsLinkPublicIpAccountIds, true
}

// HasNicPrivateIpsLinkPublicIpAccountIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicPrivateIpsLinkPublicIpAccountIds() bool {
	if o != nil && o.NicPrivateIpsLinkPublicIpAccountIds != nil {
		return true
	}

	return false
}

// SetNicPrivateIpsLinkPublicIpAccountIds gets a reference to the given []string and assigns it to the NicPrivateIpsLinkPublicIpAccountIds field.
func (o *FiltersVm) SetNicPrivateIpsLinkPublicIpAccountIds(v []string) {
	o.NicPrivateIpsLinkPublicIpAccountIds = &v
}

// GetNicPrivateIpsLinkPublicIpIds returns the NicPrivateIpsLinkPublicIpIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicPrivateIpsLinkPublicIpIds() []string {
	if o == nil || o.NicPrivateIpsLinkPublicIpIds == nil {
		var ret []string
		return ret
	}
	return *o.NicPrivateIpsLinkPublicIpIds
}

// GetNicPrivateIpsLinkPublicIpIdsOk returns a tuple with the NicPrivateIpsLinkPublicIpIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicPrivateIpsLinkPublicIpIdsOk() (*[]string, bool) {
	if o == nil || o.NicPrivateIpsLinkPublicIpIds == nil {
		return nil, false
	}
	return o.NicPrivateIpsLinkPublicIpIds, true
}

// HasNicPrivateIpsLinkPublicIpIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicPrivateIpsLinkPublicIpIds() bool {
	if o != nil && o.NicPrivateIpsLinkPublicIpIds != nil {
		return true
	}

	return false
}

// SetNicPrivateIpsLinkPublicIpIds gets a reference to the given []string and assigns it to the NicPrivateIpsLinkPublicIpIds field.
func (o *FiltersVm) SetNicPrivateIpsLinkPublicIpIds(v []string) {
	o.NicPrivateIpsLinkPublicIpIds = &v
}

// GetNicPrivateIpsPrimaryIp returns the NicPrivateIpsPrimaryIp field value if set, zero value otherwise.
func (o *FiltersVm) GetNicPrivateIpsPrimaryIp() bool {
	if o == nil || o.NicPrivateIpsPrimaryIp == nil {
		var ret bool
		return ret
	}
	return *o.NicPrivateIpsPrimaryIp
}

// GetNicPrivateIpsPrimaryIpOk returns a tuple with the NicPrivateIpsPrimaryIp field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicPrivateIpsPrimaryIpOk() (*bool, bool) {
	if o == nil || o.NicPrivateIpsPrimaryIp == nil {
		return nil, false
	}
	return o.NicPrivateIpsPrimaryIp, true
}

// HasNicPrivateIpsPrimaryIp returns a boolean if a field has been set.
func (o *FiltersVm) HasNicPrivateIpsPrimaryIp() bool {
	if o != nil && o.NicPrivateIpsPrimaryIp != nil {
		return true
	}

	return false
}

// SetNicPrivateIpsPrimaryIp gets a reference to the given bool and assigns it to the NicPrivateIpsPrimaryIp field.
func (o *FiltersVm) SetNicPrivateIpsPrimaryIp(v bool) {
	o.NicPrivateIpsPrimaryIp = &v
}

// GetNicPrivateIpsPrivateIps returns the NicPrivateIpsPrivateIps field value if set, zero value otherwise.
func (o *FiltersVm) GetNicPrivateIpsPrivateIps() []string {
	if o == nil || o.NicPrivateIpsPrivateIps == nil {
		var ret []string
		return ret
	}
	return *o.NicPrivateIpsPrivateIps
}

// GetNicPrivateIpsPrivateIpsOk returns a tuple with the NicPrivateIpsPrivateIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicPrivateIpsPrivateIpsOk() (*[]string, bool) {
	if o == nil || o.NicPrivateIpsPrivateIps == nil {
		return nil, false
	}
	return o.NicPrivateIpsPrivateIps, true
}

// HasNicPrivateIpsPrivateIps returns a boolean if a field has been set.
func (o *FiltersVm) HasNicPrivateIpsPrivateIps() bool {
	if o != nil && o.NicPrivateIpsPrivateIps != nil {
		return true
	}

	return false
}

// SetNicPrivateIpsPrivateIps gets a reference to the given []string and assigns it to the NicPrivateIpsPrivateIps field.
func (o *FiltersVm) SetNicPrivateIpsPrivateIps(v []string) {
	o.NicPrivateIpsPrivateIps = &v
}

// GetNicSecurityGroupIds returns the NicSecurityGroupIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicSecurityGroupIds() []string {
	if o == nil || o.NicSecurityGroupIds == nil {
		var ret []string
		return ret
	}
	return *o.NicSecurityGroupIds
}

// GetNicSecurityGroupIdsOk returns a tuple with the NicSecurityGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicSecurityGroupIdsOk() (*[]string, bool) {
	if o == nil || o.NicSecurityGroupIds == nil {
		return nil, false
	}
	return o.NicSecurityGroupIds, true
}

// HasNicSecurityGroupIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicSecurityGroupIds() bool {
	if o != nil && o.NicSecurityGroupIds != nil {
		return true
	}

	return false
}

// SetNicSecurityGroupIds gets a reference to the given []string and assigns it to the NicSecurityGroupIds field.
func (o *FiltersVm) SetNicSecurityGroupIds(v []string) {
	o.NicSecurityGroupIds = &v
}

// GetNicSecurityGroupNames returns the NicSecurityGroupNames field value if set, zero value otherwise.
func (o *FiltersVm) GetNicSecurityGroupNames() []string {
	if o == nil || o.NicSecurityGroupNames == nil {
		var ret []string
		return ret
	}
	return *o.NicSecurityGroupNames
}

// GetNicSecurityGroupNamesOk returns a tuple with the NicSecurityGroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicSecurityGroupNamesOk() (*[]string, bool) {
	if o == nil || o.NicSecurityGroupNames == nil {
		return nil, false
	}
	return o.NicSecurityGroupNames, true
}

// HasNicSecurityGroupNames returns a boolean if a field has been set.
func (o *FiltersVm) HasNicSecurityGroupNames() bool {
	if o != nil && o.NicSecurityGroupNames != nil {
		return true
	}

	return false
}

// SetNicSecurityGroupNames gets a reference to the given []string and assigns it to the NicSecurityGroupNames field.
func (o *FiltersVm) SetNicSecurityGroupNames(v []string) {
	o.NicSecurityGroupNames = &v
}

// GetNicStates returns the NicStates field value if set, zero value otherwise.
func (o *FiltersVm) GetNicStates() []string {
	if o == nil || o.NicStates == nil {
		var ret []string
		return ret
	}
	return *o.NicStates
}

// GetNicStatesOk returns a tuple with the NicStates field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicStatesOk() (*[]string, bool) {
	if o == nil || o.NicStates == nil {
		return nil, false
	}
	return o.NicStates, true
}

// HasNicStates returns a boolean if a field has been set.
func (o *FiltersVm) HasNicStates() bool {
	if o != nil && o.NicStates != nil {
		return true
	}

	return false
}

// SetNicStates gets a reference to the given []string and assigns it to the NicStates field.
func (o *FiltersVm) SetNicStates(v []string) {
	o.NicStates = &v
}

// GetNicSubnetIds returns the NicSubnetIds field value if set, zero value otherwise.
func (o *FiltersVm) GetNicSubnetIds() []string {
	if o == nil || o.NicSubnetIds == nil {
		var ret []string
		return ret
	}
	return *o.NicSubnetIds
}

// GetNicSubnetIdsOk returns a tuple with the NicSubnetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicSubnetIdsOk() (*[]string, bool) {
	if o == nil || o.NicSubnetIds == nil {
		return nil, false
	}
	return o.NicSubnetIds, true
}

// HasNicSubnetIds returns a boolean if a field has been set.
func (o *FiltersVm) HasNicSubnetIds() bool {
	if o != nil && o.NicSubnetIds != nil {
		return true
	}

	return false
}

// SetNicSubnetIds gets a reference to the given []string and assigns it to the NicSubnetIds field.
func (o *FiltersVm) SetNicSubnetIds(v []string) {
	o.NicSubnetIds = &v
}

// GetNicSubregionNames returns the NicSubregionNames field value if set, zero value otherwise.
func (o *FiltersVm) GetNicSubregionNames() []string {
	if o == nil || o.NicSubregionNames == nil {
		var ret []string
		return ret
	}
	return *o.NicSubregionNames
}

// GetNicSubregionNamesOk returns a tuple with the NicSubregionNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetNicSubregionNamesOk() (*[]string, bool) {
	if o == nil || o.NicSubregionNames == nil {
		return nil, false
	}
	return o.NicSubregionNames, true
}

// HasNicSubregionNames returns a boolean if a field has been set.
func (o *FiltersVm) HasNicSubregionNames() bool {
	if o != nil && o.NicSubregionNames != nil {
		return true
	}

	return false
}

// SetNicSubregionNames gets a reference to the given []string and assigns it to the NicSubregionNames field.
func (o *FiltersVm) SetNicSubregionNames(v []string) {
	o.NicSubregionNames = &v
}

// GetPlatforms returns the Platforms field value if set, zero value otherwise.
func (o *FiltersVm) GetPlatforms() []string {
	if o == nil || o.Platforms == nil {
		var ret []string
		return ret
	}
	return *o.Platforms
}

// GetPlatformsOk returns a tuple with the Platforms field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetPlatformsOk() (*[]string, bool) {
	if o == nil || o.Platforms == nil {
		return nil, false
	}
	return o.Platforms, true
}

// HasPlatforms returns a boolean if a field has been set.
func (o *FiltersVm) HasPlatforms() bool {
	if o != nil && o.Platforms != nil {
		return true
	}

	return false
}

// SetPlatforms gets a reference to the given []string and assigns it to the Platforms field.
func (o *FiltersVm) SetPlatforms(v []string) {
	o.Platforms = &v
}

// GetPrivateIps returns the PrivateIps field value if set, zero value otherwise.
func (o *FiltersVm) GetPrivateIps() []string {
	if o == nil || o.PrivateIps == nil {
		var ret []string
		return ret
	}
	return *o.PrivateIps
}

// GetPrivateIpsOk returns a tuple with the PrivateIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetPrivateIpsOk() (*[]string, bool) {
	if o == nil || o.PrivateIps == nil {
		return nil, false
	}
	return o.PrivateIps, true
}

// HasPrivateIps returns a boolean if a field has been set.
func (o *FiltersVm) HasPrivateIps() bool {
	if o != nil && o.PrivateIps != nil {
		return true
	}

	return false
}

// SetPrivateIps gets a reference to the given []string and assigns it to the PrivateIps field.
func (o *FiltersVm) SetPrivateIps(v []string) {
	o.PrivateIps = &v
}

// GetProductCodes returns the ProductCodes field value if set, zero value otherwise.
func (o *FiltersVm) GetProductCodes() []string {
	if o == nil || o.ProductCodes == nil {
		var ret []string
		return ret
	}
	return *o.ProductCodes
}

// GetProductCodesOk returns a tuple with the ProductCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetProductCodesOk() (*[]string, bool) {
	if o == nil || o.ProductCodes == nil {
		return nil, false
	}
	return o.ProductCodes, true
}

// HasProductCodes returns a boolean if a field has been set.
func (o *FiltersVm) HasProductCodes() bool {
	if o != nil && o.ProductCodes != nil {
		return true
	}

	return false
}

// SetProductCodes gets a reference to the given []string and assigns it to the ProductCodes field.
func (o *FiltersVm) SetProductCodes(v []string) {
	o.ProductCodes = &v
}

// GetPublicIps returns the PublicIps field value if set, zero value otherwise.
func (o *FiltersVm) GetPublicIps() []string {
	if o == nil || o.PublicIps == nil {
		var ret []string
		return ret
	}
	return *o.PublicIps
}

// GetPublicIpsOk returns a tuple with the PublicIps field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetPublicIpsOk() (*[]string, bool) {
	if o == nil || o.PublicIps == nil {
		return nil, false
	}
	return o.PublicIps, true
}

// HasPublicIps returns a boolean if a field has been set.
func (o *FiltersVm) HasPublicIps() bool {
	if o != nil && o.PublicIps != nil {
		return true
	}

	return false
}

// SetPublicIps gets a reference to the given []string and assigns it to the PublicIps field.
func (o *FiltersVm) SetPublicIps(v []string) {
	o.PublicIps = &v
}

// GetReservationIds returns the ReservationIds field value if set, zero value otherwise.
func (o *FiltersVm) GetReservationIds() []string {
	if o == nil || o.ReservationIds == nil {
		var ret []string
		return ret
	}
	return *o.ReservationIds
}

// GetReservationIdsOk returns a tuple with the ReservationIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetReservationIdsOk() (*[]string, bool) {
	if o == nil || o.ReservationIds == nil {
		return nil, false
	}
	return o.ReservationIds, true
}

// HasReservationIds returns a boolean if a field has been set.
func (o *FiltersVm) HasReservationIds() bool {
	if o != nil && o.ReservationIds != nil {
		return true
	}

	return false
}

// SetReservationIds gets a reference to the given []string and assigns it to the ReservationIds field.
func (o *FiltersVm) SetReservationIds(v []string) {
	o.ReservationIds = &v
}

// GetRootDeviceNames returns the RootDeviceNames field value if set, zero value otherwise.
func (o *FiltersVm) GetRootDeviceNames() []string {
	if o == nil || o.RootDeviceNames == nil {
		var ret []string
		return ret
	}
	return *o.RootDeviceNames
}

// GetRootDeviceNamesOk returns a tuple with the RootDeviceNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetRootDeviceNamesOk() (*[]string, bool) {
	if o == nil || o.RootDeviceNames == nil {
		return nil, false
	}
	return o.RootDeviceNames, true
}

// HasRootDeviceNames returns a boolean if a field has been set.
func (o *FiltersVm) HasRootDeviceNames() bool {
	if o != nil && o.RootDeviceNames != nil {
		return true
	}

	return false
}

// SetRootDeviceNames gets a reference to the given []string and assigns it to the RootDeviceNames field.
func (o *FiltersVm) SetRootDeviceNames(v []string) {
	o.RootDeviceNames = &v
}

// GetRootDeviceTypes returns the RootDeviceTypes field value if set, zero value otherwise.
func (o *FiltersVm) GetRootDeviceTypes() []string {
	if o == nil || o.RootDeviceTypes == nil {
		var ret []string
		return ret
	}
	return *o.RootDeviceTypes
}

// GetRootDeviceTypesOk returns a tuple with the RootDeviceTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetRootDeviceTypesOk() (*[]string, bool) {
	if o == nil || o.RootDeviceTypes == nil {
		return nil, false
	}
	return o.RootDeviceTypes, true
}

// HasRootDeviceTypes returns a boolean if a field has been set.
func (o *FiltersVm) HasRootDeviceTypes() bool {
	if o != nil && o.RootDeviceTypes != nil {
		return true
	}

	return false
}

// SetRootDeviceTypes gets a reference to the given []string and assigns it to the RootDeviceTypes field.
func (o *FiltersVm) SetRootDeviceTypes(v []string) {
	o.RootDeviceTypes = &v
}

// GetSecurityGroupIds returns the SecurityGroupIds field value if set, zero value otherwise.
func (o *FiltersVm) GetSecurityGroupIds() []string {
	if o == nil || o.SecurityGroupIds == nil {
		var ret []string
		return ret
	}
	return *o.SecurityGroupIds
}

// GetSecurityGroupIdsOk returns a tuple with the SecurityGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetSecurityGroupIdsOk() (*[]string, bool) {
	if o == nil || o.SecurityGroupIds == nil {
		return nil, false
	}
	return o.SecurityGroupIds, true
}

// HasSecurityGroupIds returns a boolean if a field has been set.
func (o *FiltersVm) HasSecurityGroupIds() bool {
	if o != nil && o.SecurityGroupIds != nil {
		return true
	}

	return false
}

// SetSecurityGroupIds gets a reference to the given []string and assigns it to the SecurityGroupIds field.
func (o *FiltersVm) SetSecurityGroupIds(v []string) {
	o.SecurityGroupIds = &v
}

// GetSecurityGroupNames returns the SecurityGroupNames field value if set, zero value otherwise.
func (o *FiltersVm) GetSecurityGroupNames() []string {
	if o == nil || o.SecurityGroupNames == nil {
		var ret []string
		return ret
	}
	return *o.SecurityGroupNames
}

// GetSecurityGroupNamesOk returns a tuple with the SecurityGroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetSecurityGroupNamesOk() (*[]string, bool) {
	if o == nil || o.SecurityGroupNames == nil {
		return nil, false
	}
	return o.SecurityGroupNames, true
}

// HasSecurityGroupNames returns a boolean if a field has been set.
func (o *FiltersVm) HasSecurityGroupNames() bool {
	if o != nil && o.SecurityGroupNames != nil {
		return true
	}

	return false
}

// SetSecurityGroupNames gets a reference to the given []string and assigns it to the SecurityGroupNames field.
func (o *FiltersVm) SetSecurityGroupNames(v []string) {
	o.SecurityGroupNames = &v
}

// GetStateReasonCodes returns the StateReasonCodes field value if set, zero value otherwise.
func (o *FiltersVm) GetStateReasonCodes() []int32 {
	if o == nil || o.StateReasonCodes == nil {
		var ret []int32
		return ret
	}
	return *o.StateReasonCodes
}

// GetStateReasonCodesOk returns a tuple with the StateReasonCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetStateReasonCodesOk() (*[]int32, bool) {
	if o == nil || o.StateReasonCodes == nil {
		return nil, false
	}
	return o.StateReasonCodes, true
}

// HasStateReasonCodes returns a boolean if a field has been set.
func (o *FiltersVm) HasStateReasonCodes() bool {
	if o != nil && o.StateReasonCodes != nil {
		return true
	}

	return false
}

// SetStateReasonCodes gets a reference to the given []int32 and assigns it to the StateReasonCodes field.
func (o *FiltersVm) SetStateReasonCodes(v []int32) {
	o.StateReasonCodes = &v
}

// GetStateReasonMessages returns the StateReasonMessages field value if set, zero value otherwise.
func (o *FiltersVm) GetStateReasonMessages() []string {
	if o == nil || o.StateReasonMessages == nil {
		var ret []string
		return ret
	}
	return *o.StateReasonMessages
}

// GetStateReasonMessagesOk returns a tuple with the StateReasonMessages field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetStateReasonMessagesOk() (*[]string, bool) {
	if o == nil || o.StateReasonMessages == nil {
		return nil, false
	}
	return o.StateReasonMessages, true
}

// HasStateReasonMessages returns a boolean if a field has been set.
func (o *FiltersVm) HasStateReasonMessages() bool {
	if o != nil && o.StateReasonMessages != nil {
		return true
	}

	return false
}

// SetStateReasonMessages gets a reference to the given []string and assigns it to the StateReasonMessages field.
func (o *FiltersVm) SetStateReasonMessages(v []string) {
	o.StateReasonMessages = &v
}

// GetStateReasons returns the StateReasons field value if set, zero value otherwise.
func (o *FiltersVm) GetStateReasons() []string {
	if o == nil || o.StateReasons == nil {
		var ret []string
		return ret
	}
	return *o.StateReasons
}

// GetStateReasonsOk returns a tuple with the StateReasons field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetStateReasonsOk() (*[]string, bool) {
	if o == nil || o.StateReasons == nil {
		return nil, false
	}
	return o.StateReasons, true
}

// HasStateReasons returns a boolean if a field has been set.
func (o *FiltersVm) HasStateReasons() bool {
	if o != nil && o.StateReasons != nil {
		return true
	}

	return false
}

// SetStateReasons gets a reference to the given []string and assigns it to the StateReasons field.
func (o *FiltersVm) SetStateReasons(v []string) {
	o.StateReasons = &v
}

// GetSubnetIds returns the SubnetIds field value if set, zero value otherwise.
func (o *FiltersVm) GetSubnetIds() []string {
	if o == nil || o.SubnetIds == nil {
		var ret []string
		return ret
	}
	return *o.SubnetIds
}

// GetSubnetIdsOk returns a tuple with the SubnetIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetSubnetIdsOk() (*[]string, bool) {
	if o == nil || o.SubnetIds == nil {
		return nil, false
	}
	return o.SubnetIds, true
}

// HasSubnetIds returns a boolean if a field has been set.
func (o *FiltersVm) HasSubnetIds() bool {
	if o != nil && o.SubnetIds != nil {
		return true
	}

	return false
}

// SetSubnetIds gets a reference to the given []string and assigns it to the SubnetIds field.
func (o *FiltersVm) SetSubnetIds(v []string) {
	o.SubnetIds = &v
}

// GetSubregionNames returns the SubregionNames field value if set, zero value otherwise.
func (o *FiltersVm) GetSubregionNames() []string {
	if o == nil || o.SubregionNames == nil {
		var ret []string
		return ret
	}
	return *o.SubregionNames
}

// GetSubregionNamesOk returns a tuple with the SubregionNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetSubregionNamesOk() (*[]string, bool) {
	if o == nil || o.SubregionNames == nil {
		return nil, false
	}
	return o.SubregionNames, true
}

// HasSubregionNames returns a boolean if a field has been set.
func (o *FiltersVm) HasSubregionNames() bool {
	if o != nil && o.SubregionNames != nil {
		return true
	}

	return false
}

// SetSubregionNames gets a reference to the given []string and assigns it to the SubregionNames field.
func (o *FiltersVm) SetSubregionNames(v []string) {
	o.SubregionNames = &v
}

// GetTagKeys returns the TagKeys field value if set, zero value otherwise.
func (o *FiltersVm) GetTagKeys() []string {
	if o == nil || o.TagKeys == nil {
		var ret []string
		return ret
	}
	return *o.TagKeys
}

// GetTagKeysOk returns a tuple with the TagKeys field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetTagKeysOk() (*[]string, bool) {
	if o == nil || o.TagKeys == nil {
		return nil, false
	}
	return o.TagKeys, true
}

// HasTagKeys returns a boolean if a field has been set.
func (o *FiltersVm) HasTagKeys() bool {
	if o != nil && o.TagKeys != nil {
		return true
	}

	return false
}

// SetTagKeys gets a reference to the given []string and assigns it to the TagKeys field.
func (o *FiltersVm) SetTagKeys(v []string) {
	o.TagKeys = &v
}

// GetTagValues returns the TagValues field value if set, zero value otherwise.
func (o *FiltersVm) GetTagValues() []string {
	if o == nil || o.TagValues == nil {
		var ret []string
		return ret
	}
	return *o.TagValues
}

// GetTagValuesOk returns a tuple with the TagValues field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetTagValuesOk() (*[]string, bool) {
	if o == nil || o.TagValues == nil {
		return nil, false
	}
	return o.TagValues, true
}

// HasTagValues returns a boolean if a field has been set.
func (o *FiltersVm) HasTagValues() bool {
	if o != nil && o.TagValues != nil {
		return true
	}

	return false
}

// SetTagValues gets a reference to the given []string and assigns it to the TagValues field.
func (o *FiltersVm) SetTagValues(v []string) {
	o.TagValues = &v
}

// GetTags returns the Tags field value if set, zero value otherwise.
func (o *FiltersVm) GetTags() []string {
	if o == nil || o.Tags == nil {
		var ret []string
		return ret
	}
	return *o.Tags
}

// GetTagsOk returns a tuple with the Tags field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetTagsOk() (*[]string, bool) {
	if o == nil || o.Tags == nil {
		return nil, false
	}
	return o.Tags, true
}

// HasTags returns a boolean if a field has been set.
func (o *FiltersVm) HasTags() bool {
	if o != nil && o.Tags != nil {
		return true
	}

	return false
}

// SetTags gets a reference to the given []string and assigns it to the Tags field.
func (o *FiltersVm) SetTags(v []string) {
	o.Tags = &v
}

// GetTenancies returns the Tenancies field value if set, zero value otherwise.
func (o *FiltersVm) GetTenancies() []string {
	if o == nil || o.Tenancies == nil {
		var ret []string
		return ret
	}
	return *o.Tenancies
}

// GetTenanciesOk returns a tuple with the Tenancies field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetTenanciesOk() (*[]string, bool) {
	if o == nil || o.Tenancies == nil {
		return nil, false
	}
	return o.Tenancies, true
}

// HasTenancies returns a boolean if a field has been set.
func (o *FiltersVm) HasTenancies() bool {
	if o != nil && o.Tenancies != nil {
		return true
	}

	return false
}

// SetTenancies gets a reference to the given []string and assigns it to the Tenancies field.
func (o *FiltersVm) SetTenancies(v []string) {
	o.Tenancies = &v
}

// GetVmIds returns the VmIds field value if set, zero value otherwise.
func (o *FiltersVm) GetVmIds() []string {
	if o == nil || o.VmIds == nil {
		var ret []string
		return ret
	}
	return *o.VmIds
}

// GetVmIdsOk returns a tuple with the VmIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetVmIdsOk() (*[]string, bool) {
	if o == nil || o.VmIds == nil {
		return nil, false
	}
	return o.VmIds, true
}

// HasVmIds returns a boolean if a field has been set.
func (o *FiltersVm) HasVmIds() bool {
	if o != nil && o.VmIds != nil {
		return true
	}

	return false
}

// SetVmIds gets a reference to the given []string and assigns it to the VmIds field.
func (o *FiltersVm) SetVmIds(v []string) {
	o.VmIds = &v
}

// GetVmSecurityGroupIds returns the VmSecurityGroupIds field value if set, zero value otherwise.
func (o *FiltersVm) GetVmSecurityGroupIds() []string {
	if o == nil || o.VmSecurityGroupIds == nil {
		var ret []string
		return ret
	}
	return *o.VmSecurityGroupIds
}

// GetVmSecurityGroupIdsOk returns a tuple with the VmSecurityGroupIds field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetVmSecurityGroupIdsOk() (*[]string, bool) {
	if o == nil || o.VmSecurityGroupIds == nil {
		return nil, false
	}
	return o.VmSecurityGroupIds, true
}

// HasVmSecurityGroupIds returns a boolean if a field has been set.
func (o *FiltersVm) HasVmSecurityGroupIds() bool {
	if o != nil && o.VmSecurityGroupIds != nil {
		return true
	}

	return false
}

// SetVmSecurityGroupIds gets a reference to the given []string and assigns it to the VmSecurityGroupIds field.
func (o *FiltersVm) SetVmSecurityGroupIds(v []string) {
	o.VmSecurityGroupIds = &v
}

// GetVmSecurityGroupNames returns the VmSecurityGroupNames field value if set, zero value otherwise.
func (o *FiltersVm) GetVmSecurityGroupNames() []string {
	if o == nil || o.VmSecurityGroupNames == nil {
		var ret []string
		return ret
	}
	return *o.VmSecurityGroupNames
}

// GetVmSecurityGroupNamesOk returns a tuple with the VmSecurityGroupNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetVmSecurityGroupNamesOk() (*[]string, bool) {
	if o == nil || o.VmSecurityGroupNames == nil {
		return nil, false
	}
	return o.VmSecurityGroupNames, true
}

// HasVmSecurityGroupNames returns a boolean if a field has been set.
func (o *FiltersVm) HasVmSecurityGroupNames() bool {
	if o != nil && o.VmSecurityGroupNames != nil {
		return true
	}

	return false
}

// SetVmSecurityGroupNames gets a reference to the given []string and assigns it to the VmSecurityGroupNames field.
func (o *FiltersVm) SetVmSecurityGroupNames(v []string) {
	o.VmSecurityGroupNames = &v
}

// GetVmStateCodes returns the VmStateCodes field value if set, zero value otherwise.
func (o *FiltersVm) GetVmStateCodes() []int32 {
	if o == nil || o.VmStateCodes == nil {
		var ret []int32
		return ret
	}
	return *o.VmStateCodes
}

// GetVmStateCodesOk returns a tuple with the VmStateCodes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetVmStateCodesOk() (*[]int32, bool) {
	if o == nil || o.VmStateCodes == nil {
		return nil, false
	}
	return o.VmStateCodes, true
}

// HasVmStateCodes returns a boolean if a field has been set.
func (o *FiltersVm) HasVmStateCodes() bool {
	if o != nil && o.VmStateCodes != nil {
		return true
	}

	return false
}

// SetVmStateCodes gets a reference to the given []int32 and assigns it to the VmStateCodes field.
func (o *FiltersVm) SetVmStateCodes(v []int32) {
	o.VmStateCodes = &v
}

// GetVmStateNames returns the VmStateNames field value if set, zero value otherwise.
func (o *FiltersVm) GetVmStateNames() []string {
	if o == nil || o.VmStateNames == nil {
		var ret []string
		return ret
	}
	return *o.VmStateNames
}

// GetVmStateNamesOk returns a tuple with the VmStateNames field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetVmStateNamesOk() (*[]string, bool) {
	if o == nil || o.VmStateNames == nil {
		return nil, false
	}
	return o.VmStateNames, true
}

// HasVmStateNames returns a boolean if a field has been set.
func (o *FiltersVm) HasVmStateNames() bool {
	if o != nil && o.VmStateNames != nil {
		return true
	}

	return false
}

// SetVmStateNames gets a reference to the given []string and assigns it to the VmStateNames field.
func (o *FiltersVm) SetVmStateNames(v []string) {
	o.VmStateNames = &v
}

// GetVmTypes returns the VmTypes field value if set, zero value otherwise.
func (o *FiltersVm) GetVmTypes() []string {
	if o == nil || o.VmTypes == nil {
		var ret []string
		return ret
	}
	return *o.VmTypes
}

// GetVmTypesOk returns a tuple with the VmTypes field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *FiltersVm) GetVmTypesOk() (*[]string, bool) {
	if o == nil || o.VmTypes == nil {
		return nil, false
	}
	return o.VmTypes, true
}

// HasVmTypes returns a boolean if a field has been set.
func (o *FiltersVm) HasVmTypes() bool {
	if o != nil && o.VmTypes != nil {
		return true
	}

	return false
}

// SetVmTypes gets a reference to the given []string and assigns it to the VmTypes field.
func (o *FiltersVm) SetVmTypes(v []string) {
	o.VmTypes = &v
}

func (o FiltersVm) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Architectures != nil {
		toSerialize["Architectures"] = o.Architectures
	}
	if o.BlockDeviceMappingDeleteOnVmDeletion != nil {
		toSerialize["BlockDeviceMappingDeleteOnVmDeletion"] = o.BlockDeviceMappingDeleteOnVmDeletion
	}
	if o.BlockDeviceMappingDeviceNames != nil {
		toSerialize["BlockDeviceMappingDeviceNames"] = o.BlockDeviceMappingDeviceNames
	}
	if o.BlockDeviceMappingLinkDates != nil {
		toSerialize["BlockDeviceMappingLinkDates"] = o.BlockDeviceMappingLinkDates
	}
	if o.BlockDeviceMappingStates != nil {
		toSerialize["BlockDeviceMappingStates"] = o.BlockDeviceMappingStates
	}
	if o.BlockDeviceMappingVolumeIds != nil {
		toSerialize["BlockDeviceMappingVolumeIds"] = o.BlockDeviceMappingVolumeIds
	}
	if o.BootModes != nil {
		toSerialize["BootModes"] = o.BootModes
	}
	if o.ClientTokens != nil {
		toSerialize["ClientTokens"] = o.ClientTokens
	}
	if o.CreationDates != nil {
		toSerialize["CreationDates"] = o.CreationDates
	}
	if o.ImageIds != nil {
		toSerialize["ImageIds"] = o.ImageIds
	}
	if o.IsSourceDestChecked != nil {
		toSerialize["IsSourceDestChecked"] = o.IsSourceDestChecked
	}
	if o.KeypairNames != nil {
		toSerialize["KeypairNames"] = o.KeypairNames
	}
	if o.LaunchNumbers != nil {
		toSerialize["LaunchNumbers"] = o.LaunchNumbers
	}
	if o.Lifecycles != nil {
		toSerialize["Lifecycles"] = o.Lifecycles
	}
	if o.NetIds != nil {
		toSerialize["NetIds"] = o.NetIds
	}
	if o.NicAccountIds != nil {
		toSerialize["NicAccountIds"] = o.NicAccountIds
	}
	if o.NicDescriptions != nil {
		toSerialize["NicDescriptions"] = o.NicDescriptions
	}
	if o.NicIsSourceDestChecked != nil {
		toSerialize["NicIsSourceDestChecked"] = o.NicIsSourceDestChecked
	}
	if o.NicLinkNicDeleteOnVmDeletion != nil {
		toSerialize["NicLinkNicDeleteOnVmDeletion"] = o.NicLinkNicDeleteOnVmDeletion
	}
	if o.NicLinkNicDeviceNumbers != nil {
		toSerialize["NicLinkNicDeviceNumbers"] = o.NicLinkNicDeviceNumbers
	}
	if o.NicLinkNicLinkNicDates != nil {
		toSerialize["NicLinkNicLinkNicDates"] = o.NicLinkNicLinkNicDates
	}
	if o.NicLinkNicLinkNicIds != nil {
		toSerialize["NicLinkNicLinkNicIds"] = o.NicLinkNicLinkNicIds
	}
	if o.NicLinkNicStates != nil {
		toSerialize["NicLinkNicStates"] = o.NicLinkNicStates
	}
	if o.NicLinkNicVmAccountIds != nil {
		toSerialize["NicLinkNicVmAccountIds"] = o.NicLinkNicVmAccountIds
	}
	if o.NicLinkNicVmIds != nil {
		toSerialize["NicLinkNicVmIds"] = o.NicLinkNicVmIds
	}
	if o.NicLinkPublicIpAccountIds != nil {
		toSerialize["NicLinkPublicIpAccountIds"] = o.NicLinkPublicIpAccountIds
	}
	if o.NicLinkPublicIpLinkPublicIpIds != nil {
		toSerialize["NicLinkPublicIpLinkPublicIpIds"] = o.NicLinkPublicIpLinkPublicIpIds
	}
	if o.NicLinkPublicIpPublicIpIds != nil {
		toSerialize["NicLinkPublicIpPublicIpIds"] = o.NicLinkPublicIpPublicIpIds
	}
	if o.NicLinkPublicIpPublicIps != nil {
		toSerialize["NicLinkPublicIpPublicIps"] = o.NicLinkPublicIpPublicIps
	}
	if o.NicMacAddresses != nil {
		toSerialize["NicMacAddresses"] = o.NicMacAddresses
	}
	if o.NicNetIds != nil {
		toSerialize["NicNetIds"] = o.NicNetIds
	}
	if o.NicNicIds != nil {
		toSerialize["NicNicIds"] = o.NicNicIds
	}
	if o.NicPrivateIpsLinkPublicIpAccountIds != nil {
		toSerialize["NicPrivateIpsLinkPublicIpAccountIds"] = o.NicPrivateIpsLinkPublicIpAccountIds
	}
	if o.NicPrivateIpsLinkPublicIpIds != nil {
		toSerialize["NicPrivateIpsLinkPublicIpIds"] = o.NicPrivateIpsLinkPublicIpIds
	}
	if o.NicPrivateIpsPrimaryIp != nil {
		toSerialize["NicPrivateIpsPrimaryIp"] = o.NicPrivateIpsPrimaryIp
	}
	if o.NicPrivateIpsPrivateIps != nil {
		toSerialize["NicPrivateIpsPrivateIps"] = o.NicPrivateIpsPrivateIps
	}
	if o.NicSecurityGroupIds != nil {
		toSerialize["NicSecurityGroupIds"] = o.NicSecurityGroupIds
	}
	if o.NicSecurityGroupNames != nil {
		toSerialize["NicSecurityGroupNames"] = o.NicSecurityGroupNames
	}
	if o.NicStates != nil {
		toSerialize["NicStates"] = o.NicStates
	}
	if o.NicSubnetIds != nil {
		toSerialize["NicSubnetIds"] = o.NicSubnetIds
	}
	if o.NicSubregionNames != nil {
		toSerialize["NicSubregionNames"] = o.NicSubregionNames
	}
	if o.Platforms != nil {
		toSerialize["Platforms"] = o.Platforms
	}
	if o.PrivateIps != nil {
		toSerialize["PrivateIps"] = o.PrivateIps
	}
	if o.ProductCodes != nil {
		toSerialize["ProductCodes"] = o.ProductCodes
	}
	if o.PublicIps != nil {
		toSerialize["PublicIps"] = o.PublicIps
	}
	if o.ReservationIds != nil {
		toSerialize["ReservationIds"] = o.ReservationIds
	}
	if o.RootDeviceNames != nil {
		toSerialize["RootDeviceNames"] = o.RootDeviceNames
	}
	if o.RootDeviceTypes != nil {
		toSerialize["RootDeviceTypes"] = o.RootDeviceTypes
	}
	if o.SecurityGroupIds != nil {
		toSerialize["SecurityGroupIds"] = o.SecurityGroupIds
	}
	if o.SecurityGroupNames != nil {
		toSerialize["SecurityGroupNames"] = o.SecurityGroupNames
	}
	if o.StateReasonCodes != nil {
		toSerialize["StateReasonCodes"] = o.StateReasonCodes
	}
	if o.StateReasonMessages != nil {
		toSerialize["StateReasonMessages"] = o.StateReasonMessages
	}
	if o.StateReasons != nil {
		toSerialize["StateReasons"] = o.StateReasons
	}
	if o.SubnetIds != nil {
		toSerialize["SubnetIds"] = o.SubnetIds
	}
	if o.SubregionNames != nil {
		toSerialize["SubregionNames"] = o.SubregionNames
	}
	if o.TagKeys != nil {
		toSerialize["TagKeys"] = o.TagKeys
	}
	if o.TagValues != nil {
		toSerialize["TagValues"] = o.TagValues
	}
	if o.Tags != nil {
		toSerialize["Tags"] = o.Tags
	}
	if o.Tenancies != nil {
		toSerialize["Tenancies"] = o.Tenancies
	}
	if o.VmIds != nil {
		toSerialize["VmIds"] = o.VmIds
	}
	if o.VmSecurityGroupIds != nil {
		toSerialize["VmSecurityGroupIds"] = o.VmSecurityGroupIds
	}
	if o.VmSecurityGroupNames != nil {
		toSerialize["VmSecurityGroupNames"] = o.VmSecurityGroupNames
	}
	if o.VmStateCodes != nil {
		toSerialize["VmStateCodes"] = o.VmStateCodes
	}
	if o.VmStateNames != nil {
		toSerialize["VmStateNames"] = o.VmStateNames
	}
	if o.VmTypes != nil {
		toSerialize["VmTypes"] = o.VmTypes
	}
	return json.Marshal(toSerialize)
}

type NullableFiltersVm struct {
	value *FiltersVm
	isSet bool
}

func (v NullableFiltersVm) Get() *FiltersVm {
	return v.value
}

func (v *NullableFiltersVm) Set(val *FiltersVm) {
	v.value = val
	v.isSet = true
}

func (v NullableFiltersVm) IsSet() bool {
	return v.isSet
}

func (v *NullableFiltersVm) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableFiltersVm(val *FiltersVm) *NullableFiltersVm {
	return &NullableFiltersVm{value: val, isSet: true}
}

func (v NullableFiltersVm) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableFiltersVm) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
