/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * API version: 1.35.3
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// PolicyEntities Information about the policy entities.
type PolicyEntities struct {
	Accounts *[]MinimalPolicy `json:"Accounts,omitempty"`
	Groups   *[]MinimalPolicy `json:"Groups,omitempty"`
	// If true, there are more items to return using the `FirstItem` parameter in a new request.
	HasMoreItems *bool `json:"HasMoreItems,omitempty"`
	// The number of entities the specified policy is linked to.
	ItemsCount *int32 `json:"ItemsCount,omitempty"`
	// Indicates maximum results defined for the operation.
	MaxResultsLimit *int32 `json:"MaxResultsLimit,omitempty"`
	// If true, indicates whether requested page size is more than allowed.
	MaxResultsTruncated *bool            `json:"MaxResultsTruncated,omitempty"`
	Users               *[]MinimalPolicy `json:"Users,omitempty"`
}

// NewPolicyEntities instantiates a new PolicyEntities object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicyEntities() *PolicyEntities {
	this := PolicyEntities{}
	return &this
}

// NewPolicyEntitiesWithDefaults instantiates a new PolicyEntities object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyEntitiesWithDefaults() *PolicyEntities {
	this := PolicyEntities{}
	return &this
}

// GetAccounts returns the Accounts field value if set, zero value otherwise.
func (o *PolicyEntities) GetAccounts() []MinimalPolicy {
	if o == nil || o.Accounts == nil {
		var ret []MinimalPolicy
		return ret
	}
	return *o.Accounts
}

// GetAccountsOk returns a tuple with the Accounts field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEntities) GetAccountsOk() (*[]MinimalPolicy, bool) {
	if o == nil || o.Accounts == nil {
		return nil, false
	}
	return o.Accounts, true
}

// HasAccounts returns a boolean if a field has been set.
func (o *PolicyEntities) HasAccounts() bool {
	if o != nil && o.Accounts != nil {
		return true
	}

	return false
}

// SetAccounts gets a reference to the given []MinimalPolicy and assigns it to the Accounts field.
func (o *PolicyEntities) SetAccounts(v []MinimalPolicy) {
	o.Accounts = &v
}

// GetGroups returns the Groups field value if set, zero value otherwise.
func (o *PolicyEntities) GetGroups() []MinimalPolicy {
	if o == nil || o.Groups == nil {
		var ret []MinimalPolicy
		return ret
	}
	return *o.Groups
}

// GetGroupsOk returns a tuple with the Groups field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEntities) GetGroupsOk() (*[]MinimalPolicy, bool) {
	if o == nil || o.Groups == nil {
		return nil, false
	}
	return o.Groups, true
}

// HasGroups returns a boolean if a field has been set.
func (o *PolicyEntities) HasGroups() bool {
	if o != nil && o.Groups != nil {
		return true
	}

	return false
}

// SetGroups gets a reference to the given []MinimalPolicy and assigns it to the Groups field.
func (o *PolicyEntities) SetGroups(v []MinimalPolicy) {
	o.Groups = &v
}

// GetHasMoreItems returns the HasMoreItems field value if set, zero value otherwise.
func (o *PolicyEntities) GetHasMoreItems() bool {
	if o == nil || o.HasMoreItems == nil {
		var ret bool
		return ret
	}
	return *o.HasMoreItems
}

// GetHasMoreItemsOk returns a tuple with the HasMoreItems field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEntities) GetHasMoreItemsOk() (*bool, bool) {
	if o == nil || o.HasMoreItems == nil {
		return nil, false
	}
	return o.HasMoreItems, true
}

// HasHasMoreItems returns a boolean if a field has been set.
func (o *PolicyEntities) HasHasMoreItems() bool {
	if o != nil && o.HasMoreItems != nil {
		return true
	}

	return false
}

// SetHasMoreItems gets a reference to the given bool and assigns it to the HasMoreItems field.
func (o *PolicyEntities) SetHasMoreItems(v bool) {
	o.HasMoreItems = &v
}

// GetItemsCount returns the ItemsCount field value if set, zero value otherwise.
func (o *PolicyEntities) GetItemsCount() int32 {
	if o == nil || o.ItemsCount == nil {
		var ret int32
		return ret
	}
	return *o.ItemsCount
}

// GetItemsCountOk returns a tuple with the ItemsCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEntities) GetItemsCountOk() (*int32, bool) {
	if o == nil || o.ItemsCount == nil {
		return nil, false
	}
	return o.ItemsCount, true
}

// HasItemsCount returns a boolean if a field has been set.
func (o *PolicyEntities) HasItemsCount() bool {
	if o != nil && o.ItemsCount != nil {
		return true
	}

	return false
}

// SetItemsCount gets a reference to the given int32 and assigns it to the ItemsCount field.
func (o *PolicyEntities) SetItemsCount(v int32) {
	o.ItemsCount = &v
}

// GetMaxResultsLimit returns the MaxResultsLimit field value if set, zero value otherwise.
func (o *PolicyEntities) GetMaxResultsLimit() int32 {
	if o == nil || o.MaxResultsLimit == nil {
		var ret int32
		return ret
	}
	return *o.MaxResultsLimit
}

// GetMaxResultsLimitOk returns a tuple with the MaxResultsLimit field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEntities) GetMaxResultsLimitOk() (*int32, bool) {
	if o == nil || o.MaxResultsLimit == nil {
		return nil, false
	}
	return o.MaxResultsLimit, true
}

// HasMaxResultsLimit returns a boolean if a field has been set.
func (o *PolicyEntities) HasMaxResultsLimit() bool {
	if o != nil && o.MaxResultsLimit != nil {
		return true
	}

	return false
}

// SetMaxResultsLimit gets a reference to the given int32 and assigns it to the MaxResultsLimit field.
func (o *PolicyEntities) SetMaxResultsLimit(v int32) {
	o.MaxResultsLimit = &v
}

// GetMaxResultsTruncated returns the MaxResultsTruncated field value if set, zero value otherwise.
func (o *PolicyEntities) GetMaxResultsTruncated() bool {
	if o == nil || o.MaxResultsTruncated == nil {
		var ret bool
		return ret
	}
	return *o.MaxResultsTruncated
}

// GetMaxResultsTruncatedOk returns a tuple with the MaxResultsTruncated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEntities) GetMaxResultsTruncatedOk() (*bool, bool) {
	if o == nil || o.MaxResultsTruncated == nil {
		return nil, false
	}
	return o.MaxResultsTruncated, true
}

// HasMaxResultsTruncated returns a boolean if a field has been set.
func (o *PolicyEntities) HasMaxResultsTruncated() bool {
	if o != nil && o.MaxResultsTruncated != nil {
		return true
	}

	return false
}

// SetMaxResultsTruncated gets a reference to the given bool and assigns it to the MaxResultsTruncated field.
func (o *PolicyEntities) SetMaxResultsTruncated(v bool) {
	o.MaxResultsTruncated = &v
}

// GetUsers returns the Users field value if set, zero value otherwise.
func (o *PolicyEntities) GetUsers() []MinimalPolicy {
	if o == nil || o.Users == nil {
		var ret []MinimalPolicy
		return ret
	}
	return *o.Users
}

// GetUsersOk returns a tuple with the Users field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *PolicyEntities) GetUsersOk() (*[]MinimalPolicy, bool) {
	if o == nil || o.Users == nil {
		return nil, false
	}
	return o.Users, true
}

// HasUsers returns a boolean if a field has been set.
func (o *PolicyEntities) HasUsers() bool {
	if o != nil && o.Users != nil {
		return true
	}

	return false
}

// SetUsers gets a reference to the given []MinimalPolicy and assigns it to the Users field.
func (o *PolicyEntities) SetUsers(v []MinimalPolicy) {
	o.Users = &v
}

func (o PolicyEntities) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.Accounts != nil {
		toSerialize["Accounts"] = o.Accounts
	}
	if o.Groups != nil {
		toSerialize["Groups"] = o.Groups
	}
	if o.HasMoreItems != nil {
		toSerialize["HasMoreItems"] = o.HasMoreItems
	}
	if o.ItemsCount != nil {
		toSerialize["ItemsCount"] = o.ItemsCount
	}
	if o.MaxResultsLimit != nil {
		toSerialize["MaxResultsLimit"] = o.MaxResultsLimit
	}
	if o.MaxResultsTruncated != nil {
		toSerialize["MaxResultsTruncated"] = o.MaxResultsTruncated
	}
	if o.Users != nil {
		toSerialize["Users"] = o.Users
	}
	return json.Marshal(toSerialize)
}

type NullablePolicyEntities struct {
	value *PolicyEntities
	isSet bool
}

func (v NullablePolicyEntities) Get() *PolicyEntities {
	return v.value
}

func (v *NullablePolicyEntities) Set(val *PolicyEntities) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicyEntities) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicyEntities) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicyEntities(val *PolicyEntities) *NullablePolicyEntities {
	return &NullablePolicyEntities{value: val, isSet: true}
}

func (v NullablePolicyEntities) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicyEntities) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
