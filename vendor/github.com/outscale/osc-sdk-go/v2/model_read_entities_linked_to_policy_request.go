/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * API version: 1.35.4
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// ReadEntitiesLinkedToPolicyRequest struct for ReadEntitiesLinkedToPolicyRequest
type ReadEntitiesLinkedToPolicyRequest struct {
	// The type of entity linked to the policy you want to get information about.
	EntitiesType *[]string `json:"EntitiesType,omitempty"`
	// The item starting the list of entities requested.
	FirstItem *int32 `json:"FirstItem,omitempty"`
	// The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
	PolicyOrn *string `json:"PolicyOrn,omitempty"`
	// The maximum number of items that can be returned in a single response (by default, 100).
	ResultsPerPage *int32 `json:"ResultsPerPage,omitempty"`
}

// NewReadEntitiesLinkedToPolicyRequest instantiates a new ReadEntitiesLinkedToPolicyRequest object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewReadEntitiesLinkedToPolicyRequest() *ReadEntitiesLinkedToPolicyRequest {
	this := ReadEntitiesLinkedToPolicyRequest{}
	return &this
}

// NewReadEntitiesLinkedToPolicyRequestWithDefaults instantiates a new ReadEntitiesLinkedToPolicyRequest object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewReadEntitiesLinkedToPolicyRequestWithDefaults() *ReadEntitiesLinkedToPolicyRequest {
	this := ReadEntitiesLinkedToPolicyRequest{}
	return &this
}

// GetEntitiesType returns the EntitiesType field value if set, zero value otherwise.
func (o *ReadEntitiesLinkedToPolicyRequest) GetEntitiesType() []string {
	if o == nil || o.EntitiesType == nil {
		var ret []string
		return ret
	}
	return *o.EntitiesType
}

// GetEntitiesTypeOk returns a tuple with the EntitiesType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadEntitiesLinkedToPolicyRequest) GetEntitiesTypeOk() (*[]string, bool) {
	if o == nil || o.EntitiesType == nil {
		return nil, false
	}
	return o.EntitiesType, true
}

// HasEntitiesType returns a boolean if a field has been set.
func (o *ReadEntitiesLinkedToPolicyRequest) HasEntitiesType() bool {
	if o != nil && o.EntitiesType != nil {
		return true
	}

	return false
}

// SetEntitiesType gets a reference to the given []string and assigns it to the EntitiesType field.
func (o *ReadEntitiesLinkedToPolicyRequest) SetEntitiesType(v []string) {
	o.EntitiesType = &v
}

// GetFirstItem returns the FirstItem field value if set, zero value otherwise.
func (o *ReadEntitiesLinkedToPolicyRequest) GetFirstItem() int32 {
	if o == nil || o.FirstItem == nil {
		var ret int32
		return ret
	}
	return *o.FirstItem
}

// GetFirstItemOk returns a tuple with the FirstItem field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadEntitiesLinkedToPolicyRequest) GetFirstItemOk() (*int32, bool) {
	if o == nil || o.FirstItem == nil {
		return nil, false
	}
	return o.FirstItem, true
}

// HasFirstItem returns a boolean if a field has been set.
func (o *ReadEntitiesLinkedToPolicyRequest) HasFirstItem() bool {
	if o != nil && o.FirstItem != nil {
		return true
	}

	return false
}

// SetFirstItem gets a reference to the given int32 and assigns it to the FirstItem field.
func (o *ReadEntitiesLinkedToPolicyRequest) SetFirstItem(v int32) {
	o.FirstItem = &v
}

// GetPolicyOrn returns the PolicyOrn field value if set, zero value otherwise.
func (o *ReadEntitiesLinkedToPolicyRequest) GetPolicyOrn() string {
	if o == nil || o.PolicyOrn == nil {
		var ret string
		return ret
	}
	return *o.PolicyOrn
}

// GetPolicyOrnOk returns a tuple with the PolicyOrn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadEntitiesLinkedToPolicyRequest) GetPolicyOrnOk() (*string, bool) {
	if o == nil || o.PolicyOrn == nil {
		return nil, false
	}
	return o.PolicyOrn, true
}

// HasPolicyOrn returns a boolean if a field has been set.
func (o *ReadEntitiesLinkedToPolicyRequest) HasPolicyOrn() bool {
	if o != nil && o.PolicyOrn != nil {
		return true
	}

	return false
}

// SetPolicyOrn gets a reference to the given string and assigns it to the PolicyOrn field.
func (o *ReadEntitiesLinkedToPolicyRequest) SetPolicyOrn(v string) {
	o.PolicyOrn = &v
}

// GetResultsPerPage returns the ResultsPerPage field value if set, zero value otherwise.
func (o *ReadEntitiesLinkedToPolicyRequest) GetResultsPerPage() int32 {
	if o == nil || o.ResultsPerPage == nil {
		var ret int32
		return ret
	}
	return *o.ResultsPerPage
}

// GetResultsPerPageOk returns a tuple with the ResultsPerPage field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ReadEntitiesLinkedToPolicyRequest) GetResultsPerPageOk() (*int32, bool) {
	if o == nil || o.ResultsPerPage == nil {
		return nil, false
	}
	return o.ResultsPerPage, true
}

// HasResultsPerPage returns a boolean if a field has been set.
func (o *ReadEntitiesLinkedToPolicyRequest) HasResultsPerPage() bool {
	if o != nil && o.ResultsPerPage != nil {
		return true
	}

	return false
}

// SetResultsPerPage gets a reference to the given int32 and assigns it to the ResultsPerPage field.
func (o *ReadEntitiesLinkedToPolicyRequest) SetResultsPerPage(v int32) {
	o.ResultsPerPage = &v
}

func (o ReadEntitiesLinkedToPolicyRequest) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.EntitiesType != nil {
		toSerialize["EntitiesType"] = o.EntitiesType
	}
	if o.FirstItem != nil {
		toSerialize["FirstItem"] = o.FirstItem
	}
	if o.PolicyOrn != nil {
		toSerialize["PolicyOrn"] = o.PolicyOrn
	}
	if o.ResultsPerPage != nil {
		toSerialize["ResultsPerPage"] = o.ResultsPerPage
	}
	return json.Marshal(toSerialize)
}

type NullableReadEntitiesLinkedToPolicyRequest struct {
	value *ReadEntitiesLinkedToPolicyRequest
	isSet bool
}

func (v NullableReadEntitiesLinkedToPolicyRequest) Get() *ReadEntitiesLinkedToPolicyRequest {
	return v.value
}

func (v *NullableReadEntitiesLinkedToPolicyRequest) Set(val *ReadEntitiesLinkedToPolicyRequest) {
	v.value = val
	v.isSet = true
}

func (v NullableReadEntitiesLinkedToPolicyRequest) IsSet() bool {
	return v.isSet
}

func (v *NullableReadEntitiesLinkedToPolicyRequest) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableReadEntitiesLinkedToPolicyRequest(val *ReadEntitiesLinkedToPolicyRequest) *NullableReadEntitiesLinkedToPolicyRequest {
	return &NullableReadEntitiesLinkedToPolicyRequest{value: val, isSet: true}
}

func (v NullableReadEntitiesLinkedToPolicyRequest) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableReadEntitiesLinkedToPolicyRequest) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
