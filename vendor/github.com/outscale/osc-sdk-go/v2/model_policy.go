/*
 * 3DS OUTSCALE API
 *
 * Welcome to the OUTSCALE API documentation.<br /> The OUTSCALE API enables you to manage your resources in the OUTSCALE Cloud. This documentation describes the different actions available along with code examples.<br /><br /> Throttling: To protect against overloads, the number of identical requests allowed in a given time period is limited.<br /> Brute force: To protect against brute force attacks, the number of failed authentication attempts in a given time period is limited.<br /><br /> Note that the OUTSCALE Cloud is compatible with Amazon Web Services (AWS) APIs, but there are [differences in resource names](https://docs.outscale.com/en/userguide/About-the-APIs.html) between AWS and the OUTSCALE API.<br /> You can also manage your resources using the [Cockpit](https://docs.outscale.com/en/userguide/About-Cockpit.html) web interface.<br /><br /> An OpenAPI description of the OUTSCALE API is also available in this [GitHub repository](https://github.com/outscale/osc-api).<br /> # Authentication Schemes ### Access Key/Secret Key The main way to authenticate your requests to the OUTSCALE API is to use an access key and a secret key.<br /> The mechanism behind this is based on AWS Signature Version 4, whose technical implementation details are described in [Signature of API Requests](https://docs.outscale.com/en/userguide/Signature-of-API-Requests.html).<br /><br /> In practice, the way to specify your access key and secret key depends on the tool or SDK you want to use to interact with the API.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify your access key, secret key, and the Region of your account. > 2. You then specify the `--profile` option when executing OSC CLI commands. > > For more information, see [Installing and Configuring OSC CLI](https://docs.outscale.com/en/userguide/Installing-and-Configuring-OSC-CLI.html).  See the code samples in each section of this documentation for specific examples in different programming languages.<br /> For more information about access keys, see [About Access Keys](https://docs.outscale.com/en/userguide/About-Access-Keys.html).  > If you try to sign requests with an invalid access key four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### Login/Password For certain API actions, you can also use basic authentication with the login (email address) and password of your TINA account.<br /> This is useful only in special circumstances, for example if you do not know your access key/secret key and want to retrieve them programmatically.<br /> In most cases, however, you can use the Cockpit web interface to retrieve them.<br />  > For example, if you use OSC CLI: > 1. You need to create an **~/.osc/config.json** file to specify the Region of your account, but you leave the access key value and secret key value empty (`&quot;&quot;`). > 2. You then specify the `--profile`, `--authentication-method`, `--login`, and `--password` options when executing OSC CLI commands.  See the code samples in each section of this documentation for specific examples in different programming languages.  > If you try to sign requests with an invalid password four times in a row, further authentication attempts will be prevented for 1 minute. This lockout time increases 1 minute every four failed attempts, for up to 10 minutes.  ### No Authentication A few API actions do not require any authentication. They are indicated as such in this documentation.<br /> ### Other Security Mechanisms In parallel with the authentication schemes, you can add other security mechanisms to your OUTSCALE account, for example to restrict API requests by IP or other criteria.<br /> For more information, see [Managing Your API Accesses](https://docs.outscale.com/en/userguide/Managing-Your-API-Accesses.html). # Pagination Tutorial You can learn more about the pagination methods for read calls in the dedicated [pagination tutorial](https://docs.outscale.com/en/userguide/Tutorial-Paginating-an-API-Request.html). # Error Codes Reference You can learn more about errors returned by the API in the dedicated [errors page](api-errors.html).
 *
 * API version: 1.35.4
 * Contact: support@outscale.com
 */

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package osc

import (
	"encoding/json"
)

// Policy Information about the policy.
type Policy struct {
	// The date and time (UTC) at which the policy was created.
	CreationDate *string `json:"CreationDate,omitempty"`
	// A friendly name for the policy (between 0 and 1000 characters).
	Description *string `json:"Description,omitempty"`
	// Indicates whether the policy can be linked to a group or an EIM user.
	IsLinkable *bool `json:"IsLinkable,omitempty"`
	// The date and time (UTC) at which the policy was last modified.
	LastModificationDate *string `json:"LastModificationDate,omitempty"`
	// The OUTSCALE Resource Name (ORN) of the policy. For more information, see [Resource Identifiers](https://docs.outscale.com/en/userguide/Resource-Identifiers.html).
	Orn *string `json:"Orn,omitempty"`
	// The path to the policy.
	Path *string `json:"Path,omitempty"`
	// The ID of the policy default version.
	PolicyDefaultVersionId *string `json:"PolicyDefaultVersionId,omitempty"`
	// The ID of the policy.
	PolicyId *string `json:"PolicyId,omitempty"`
	// The name of the policy.
	PolicyName *string `json:"PolicyName,omitempty"`
	// The number of resources attached to the policy.
	ResourcesCount *int32 `json:"ResourcesCount,omitempty"`
}

// NewPolicy instantiates a new Policy object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPolicy() *Policy {
	this := Policy{}
	return &this
}

// NewPolicyWithDefaults instantiates a new Policy object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPolicyWithDefaults() *Policy {
	this := Policy{}
	return &this
}

// GetCreationDate returns the CreationDate field value if set, zero value otherwise.
func (o *Policy) GetCreationDate() string {
	if o == nil || o.CreationDate == nil {
		var ret string
		return ret
	}
	return *o.CreationDate
}

// GetCreationDateOk returns a tuple with the CreationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetCreationDateOk() (*string, bool) {
	if o == nil || o.CreationDate == nil {
		return nil, false
	}
	return o.CreationDate, true
}

// HasCreationDate returns a boolean if a field has been set.
func (o *Policy) HasCreationDate() bool {
	if o != nil && o.CreationDate != nil {
		return true
	}

	return false
}

// SetCreationDate gets a reference to the given string and assigns it to the CreationDate field.
func (o *Policy) SetCreationDate(v string) {
	o.CreationDate = &v
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Policy) GetDescription() string {
	if o == nil || o.Description == nil {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetDescriptionOk() (*string, bool) {
	if o == nil || o.Description == nil {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Policy) HasDescription() bool {
	if o != nil && o.Description != nil {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Policy) SetDescription(v string) {
	o.Description = &v
}

// GetIsLinkable returns the IsLinkable field value if set, zero value otherwise.
func (o *Policy) GetIsLinkable() bool {
	if o == nil || o.IsLinkable == nil {
		var ret bool
		return ret
	}
	return *o.IsLinkable
}

// GetIsLinkableOk returns a tuple with the IsLinkable field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetIsLinkableOk() (*bool, bool) {
	if o == nil || o.IsLinkable == nil {
		return nil, false
	}
	return o.IsLinkable, true
}

// HasIsLinkable returns a boolean if a field has been set.
func (o *Policy) HasIsLinkable() bool {
	if o != nil && o.IsLinkable != nil {
		return true
	}

	return false
}

// SetIsLinkable gets a reference to the given bool and assigns it to the IsLinkable field.
func (o *Policy) SetIsLinkable(v bool) {
	o.IsLinkable = &v
}

// GetLastModificationDate returns the LastModificationDate field value if set, zero value otherwise.
func (o *Policy) GetLastModificationDate() string {
	if o == nil || o.LastModificationDate == nil {
		var ret string
		return ret
	}
	return *o.LastModificationDate
}

// GetLastModificationDateOk returns a tuple with the LastModificationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetLastModificationDateOk() (*string, bool) {
	if o == nil || o.LastModificationDate == nil {
		return nil, false
	}
	return o.LastModificationDate, true
}

// HasLastModificationDate returns a boolean if a field has been set.
func (o *Policy) HasLastModificationDate() bool {
	if o != nil && o.LastModificationDate != nil {
		return true
	}

	return false
}

// SetLastModificationDate gets a reference to the given string and assigns it to the LastModificationDate field.
func (o *Policy) SetLastModificationDate(v string) {
	o.LastModificationDate = &v
}

// GetOrn returns the Orn field value if set, zero value otherwise.
func (o *Policy) GetOrn() string {
	if o == nil || o.Orn == nil {
		var ret string
		return ret
	}
	return *o.Orn
}

// GetOrnOk returns a tuple with the Orn field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetOrnOk() (*string, bool) {
	if o == nil || o.Orn == nil {
		return nil, false
	}
	return o.Orn, true
}

// HasOrn returns a boolean if a field has been set.
func (o *Policy) HasOrn() bool {
	if o != nil && o.Orn != nil {
		return true
	}

	return false
}

// SetOrn gets a reference to the given string and assigns it to the Orn field.
func (o *Policy) SetOrn(v string) {
	o.Orn = &v
}

// GetPath returns the Path field value if set, zero value otherwise.
func (o *Policy) GetPath() string {
	if o == nil || o.Path == nil {
		var ret string
		return ret
	}
	return *o.Path
}

// GetPathOk returns a tuple with the Path field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetPathOk() (*string, bool) {
	if o == nil || o.Path == nil {
		return nil, false
	}
	return o.Path, true
}

// HasPath returns a boolean if a field has been set.
func (o *Policy) HasPath() bool {
	if o != nil && o.Path != nil {
		return true
	}

	return false
}

// SetPath gets a reference to the given string and assigns it to the Path field.
func (o *Policy) SetPath(v string) {
	o.Path = &v
}

// GetPolicyDefaultVersionId returns the PolicyDefaultVersionId field value if set, zero value otherwise.
func (o *Policy) GetPolicyDefaultVersionId() string {
	if o == nil || o.PolicyDefaultVersionId == nil {
		var ret string
		return ret
	}
	return *o.PolicyDefaultVersionId
}

// GetPolicyDefaultVersionIdOk returns a tuple with the PolicyDefaultVersionId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetPolicyDefaultVersionIdOk() (*string, bool) {
	if o == nil || o.PolicyDefaultVersionId == nil {
		return nil, false
	}
	return o.PolicyDefaultVersionId, true
}

// HasPolicyDefaultVersionId returns a boolean if a field has been set.
func (o *Policy) HasPolicyDefaultVersionId() bool {
	if o != nil && o.PolicyDefaultVersionId != nil {
		return true
	}

	return false
}

// SetPolicyDefaultVersionId gets a reference to the given string and assigns it to the PolicyDefaultVersionId field.
func (o *Policy) SetPolicyDefaultVersionId(v string) {
	o.PolicyDefaultVersionId = &v
}

// GetPolicyId returns the PolicyId field value if set, zero value otherwise.
func (o *Policy) GetPolicyId() string {
	if o == nil || o.PolicyId == nil {
		var ret string
		return ret
	}
	return *o.PolicyId
}

// GetPolicyIdOk returns a tuple with the PolicyId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetPolicyIdOk() (*string, bool) {
	if o == nil || o.PolicyId == nil {
		return nil, false
	}
	return o.PolicyId, true
}

// HasPolicyId returns a boolean if a field has been set.
func (o *Policy) HasPolicyId() bool {
	if o != nil && o.PolicyId != nil {
		return true
	}

	return false
}

// SetPolicyId gets a reference to the given string and assigns it to the PolicyId field.
func (o *Policy) SetPolicyId(v string) {
	o.PolicyId = &v
}

// GetPolicyName returns the PolicyName field value if set, zero value otherwise.
func (o *Policy) GetPolicyName() string {
	if o == nil || o.PolicyName == nil {
		var ret string
		return ret
	}
	return *o.PolicyName
}

// GetPolicyNameOk returns a tuple with the PolicyName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetPolicyNameOk() (*string, bool) {
	if o == nil || o.PolicyName == nil {
		return nil, false
	}
	return o.PolicyName, true
}

// HasPolicyName returns a boolean if a field has been set.
func (o *Policy) HasPolicyName() bool {
	if o != nil && o.PolicyName != nil {
		return true
	}

	return false
}

// SetPolicyName gets a reference to the given string and assigns it to the PolicyName field.
func (o *Policy) SetPolicyName(v string) {
	o.PolicyName = &v
}

// GetResourcesCount returns the ResourcesCount field value if set, zero value otherwise.
func (o *Policy) GetResourcesCount() int32 {
	if o == nil || o.ResourcesCount == nil {
		var ret int32
		return ret
	}
	return *o.ResourcesCount
}

// GetResourcesCountOk returns a tuple with the ResourcesCount field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Policy) GetResourcesCountOk() (*int32, bool) {
	if o == nil || o.ResourcesCount == nil {
		return nil, false
	}
	return o.ResourcesCount, true
}

// HasResourcesCount returns a boolean if a field has been set.
func (o *Policy) HasResourcesCount() bool {
	if o != nil && o.ResourcesCount != nil {
		return true
	}

	return false
}

// SetResourcesCount gets a reference to the given int32 and assigns it to the ResourcesCount field.
func (o *Policy) SetResourcesCount(v int32) {
	o.ResourcesCount = &v
}

func (o Policy) MarshalJSON() ([]byte, error) {
	toSerialize := map[string]interface{}{}
	if o.CreationDate != nil {
		toSerialize["CreationDate"] = o.CreationDate
	}
	if o.Description != nil {
		toSerialize["Description"] = o.Description
	}
	if o.IsLinkable != nil {
		toSerialize["IsLinkable"] = o.IsLinkable
	}
	if o.LastModificationDate != nil {
		toSerialize["LastModificationDate"] = o.LastModificationDate
	}
	if o.Orn != nil {
		toSerialize["Orn"] = o.Orn
	}
	if o.Path != nil {
		toSerialize["Path"] = o.Path
	}
	if o.PolicyDefaultVersionId != nil {
		toSerialize["PolicyDefaultVersionId"] = o.PolicyDefaultVersionId
	}
	if o.PolicyId != nil {
		toSerialize["PolicyId"] = o.PolicyId
	}
	if o.PolicyName != nil {
		toSerialize["PolicyName"] = o.PolicyName
	}
	if o.ResourcesCount != nil {
		toSerialize["ResourcesCount"] = o.ResourcesCount
	}
	return json.Marshal(toSerialize)
}

type NullablePolicy struct {
	value *Policy
	isSet bool
}

func (v NullablePolicy) Get() *Policy {
	return v.value
}

func (v *NullablePolicy) Set(val *Policy) {
	v.value = val
	v.isSet = true
}

func (v NullablePolicy) IsSet() bool {
	return v.isSet
}

func (v *NullablePolicy) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePolicy(val *Policy) *NullablePolicy {
	return &NullablePolicy{value: val, isSet: true}
}

func (v NullablePolicy) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePolicy) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}
