// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/link/v3/models (interfaces: EncryptedStorage)

// Package models is a generated GoMock package.
package models

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockEncryptedStorage is a mock of EncryptedStorage interface.
type MockEncryptedStorage struct {
	ctrl     *gomock.Controller
	recorder *MockEncryptedStorageMockRecorder
}

// MockEncryptedStorageMockRecorder is the mock recorder for MockEncryptedStorage.
type MockEncryptedStorageMockRecorder struct {
	mock *MockEncryptedStorage
}

// NewMockEncryptedStorage creates a new mock instance.
func NewMockEncryptedStorage(ctrl *gomock.Controller) *MockEncryptedStorage {
	mock := &MockEncryptedStorage{ctrl: ctrl}
	mock.recorder = &MockEncryptedStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEncryptedStorage) EXPECT() *MockEncryptedStorageMockRecorder {
	return m.recorder
}

// Cleanup mocks base method.
func (m *MockEncryptedStorage) Cleanup(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Cleanup", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Cleanup indicates an expected call of Cleanup.
func (mr *MockEncryptedStorageMockRecorder) Cleanup(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Cleanup", reflect.TypeOf((*MockEncryptedStorage)(nil).Cleanup), arg0, arg1)
}

// Decrypt mocks base method.
func (m *MockEncryptedStorage) Decrypt(arg0 context.Context, arg1 EncryptedDataLink, arg2 interface{}) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Decrypt", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Decrypt indicates an expected call of Decrypt.
func (mr *MockEncryptedStorageMockRecorder) Decrypt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Decrypt", reflect.TypeOf((*MockEncryptedStorage)(nil).Decrypt), arg0, arg1, arg2)
}

// Encrypt mocks base method.
func (m *MockEncryptedStorage) Encrypt(arg0 context.Context, arg1 string, arg2 interface{}) (EncryptedDataLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Encrypt", arg0, arg1, arg2)
	ret0, _ := ret[0].(EncryptedDataLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Encrypt indicates an expected call of Encrypt.
func (mr *MockEncryptedStorageMockRecorder) Encrypt(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Encrypt", reflect.TypeOf((*MockEncryptedStorage)(nil).Encrypt), arg0, arg1, arg2)
}

// RotateEncryptionKey mocks base method.
func (m *MockEncryptedStorage) RotateEncryptionKey(arg0 context.Context) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RotateEncryptionKey", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RotateEncryptionKey indicates an expected call of RotateEncryptionKey.
func (mr *MockEncryptedStorageMockRecorder) RotateEncryptionKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RotateEncryptionKey", reflect.TypeOf((*MockEncryptedStorage)(nil).RotateEncryptionKey), arg0)
}
