// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/Scalingo/link/v3/models (interfaces: Storage)

// Package modelsmock is a generated GoMock package.
package modelsmock

import (
	context "context"
	reflect "reflect"

	models "github.com/Scalingo/link/v3/models"
	gomock "github.com/golang/mock/gomock"
)

// MockStorage is a mock of Storage interface.
type MockStorage struct {
	ctrl     *gomock.Controller
	recorder *MockStorageMockRecorder
}

// MockStorageMockRecorder is the mock recorder for MockStorage.
type MockStorageMockRecorder struct {
	mock *MockStorage
}

// NewMockStorage creates a new mock instance.
func NewMockStorage(ctrl *gomock.Controller) *MockStorage {
	mock := &MockStorage{ctrl: ctrl}
	mock.recorder = &MockStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockStorage) EXPECT() *MockStorageMockRecorder {
	return m.recorder
}

// AddEndpoint mocks base method.
func (m *MockStorage) AddEndpoint(arg0 context.Context, arg1 models.Endpoint) (models.Endpoint, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddEndpoint", arg0, arg1)
	ret0, _ := ret[0].(models.Endpoint)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddEndpoint indicates an expected call of AddEndpoint.
func (mr *MockStorageMockRecorder) AddEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddEndpoint", reflect.TypeOf((*MockStorage)(nil).AddEndpoint), arg0, arg1)
}

// GetCurrentHost mocks base method.
func (m *MockStorage) GetCurrentHost(arg0 context.Context) (models.Host, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetCurrentHost", arg0)
	ret0, _ := ret[0].(models.Host)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCurrentHost indicates an expected call of GetCurrentHost.
func (mr *MockStorageMockRecorder) GetCurrentHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCurrentHost", reflect.TypeOf((*MockStorage)(nil).GetCurrentHost), arg0)
}

// GetEncryptedData mocks base method.
func (m *MockStorage) GetEncryptedData(arg0 context.Context, arg1, arg2 string) (models.EncryptedData, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEncryptedData", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.EncryptedData)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEncryptedData indicates an expected call of GetEncryptedData.
func (mr *MockStorageMockRecorder) GetEncryptedData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEncryptedData", reflect.TypeOf((*MockStorage)(nil).GetEncryptedData), arg0, arg1, arg2)
}

// GetEndpointHosts mocks base method.
func (m *MockStorage) GetEndpointHosts(arg0 context.Context, arg1 string) ([]string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpointHosts", arg0, arg1)
	ret0, _ := ret[0].([]string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpointHosts indicates an expected call of GetEndpointHosts.
func (mr *MockStorageMockRecorder) GetEndpointHosts(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpointHosts", reflect.TypeOf((*MockStorage)(nil).GetEndpointHosts), arg0, arg1)
}

// GetEndpoints mocks base method.
func (m *MockStorage) GetEndpoints(arg0 context.Context) (models.Endpoints, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetEndpoints", arg0)
	ret0, _ := ret[0].(models.Endpoints)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetEndpoints indicates an expected call of GetEndpoints.
func (mr *MockStorageMockRecorder) GetEndpoints(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetEndpoints", reflect.TypeOf((*MockStorage)(nil).GetEndpoints), arg0)
}

// LinkEndpointWithCurrentHost mocks base method.
func (m *MockStorage) LinkEndpointWithCurrentHost(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "LinkEndpointWithCurrentHost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// LinkEndpointWithCurrentHost indicates an expected call of LinkEndpointWithCurrentHost.
func (mr *MockStorageMockRecorder) LinkEndpointWithCurrentHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "LinkEndpointWithCurrentHost", reflect.TypeOf((*MockStorage)(nil).LinkEndpointWithCurrentHost), arg0, arg1)
}

// ListEncryptedDataForHost mocks base method.
func (m *MockStorage) ListEncryptedDataForHost(arg0 context.Context) ([]models.EncryptedDataLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListEncryptedDataForHost", arg0)
	ret0, _ := ret[0].([]models.EncryptedDataLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListEncryptedDataForHost indicates an expected call of ListEncryptedDataForHost.
func (mr *MockStorageMockRecorder) ListEncryptedDataForHost(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListEncryptedDataForHost", reflect.TypeOf((*MockStorage)(nil).ListEncryptedDataForHost), arg0)
}

// RemoveEncryptedDataForEndpoint mocks base method.
func (m *MockStorage) RemoveEncryptedDataForEndpoint(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEncryptedDataForEndpoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEncryptedDataForEndpoint indicates an expected call of RemoveEncryptedDataForEndpoint.
func (mr *MockStorageMockRecorder) RemoveEncryptedDataForEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEncryptedDataForEndpoint", reflect.TypeOf((*MockStorage)(nil).RemoveEncryptedDataForEndpoint), arg0, arg1)
}

// RemoveEndpoint mocks base method.
func (m *MockStorage) RemoveEndpoint(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveEndpoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveEndpoint indicates an expected call of RemoveEndpoint.
func (mr *MockStorageMockRecorder) RemoveEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveEndpoint", reflect.TypeOf((*MockStorage)(nil).RemoveEndpoint), arg0, arg1)
}

// SaveHost mocks base method.
func (m *MockStorage) SaveHost(arg0 context.Context, arg1 models.Host) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveHost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveHost indicates an expected call of SaveHost.
func (mr *MockStorageMockRecorder) SaveHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveHost", reflect.TypeOf((*MockStorage)(nil).SaveHost), arg0, arg1)
}

// UnlinkEndpointFromCurrentHost mocks base method.
func (m *MockStorage) UnlinkEndpointFromCurrentHost(arg0 context.Context, arg1 string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UnlinkEndpointFromCurrentHost", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UnlinkEndpointFromCurrentHost indicates an expected call of UnlinkEndpointFromCurrentHost.
func (mr *MockStorageMockRecorder) UnlinkEndpointFromCurrentHost(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UnlinkEndpointFromCurrentHost", reflect.TypeOf((*MockStorage)(nil).UnlinkEndpointFromCurrentHost), arg0, arg1)
}

// UpdateEndpoint mocks base method.
func (m *MockStorage) UpdateEndpoint(arg0 context.Context, arg1 models.Endpoint) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateEndpoint", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateEndpoint indicates an expected call of UpdateEndpoint.
func (mr *MockStorageMockRecorder) UpdateEndpoint(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateEndpoint", reflect.TypeOf((*MockStorage)(nil).UpdateEndpoint), arg0, arg1)
}

// UpsertEncryptedData mocks base method.
func (m *MockStorage) UpsertEncryptedData(arg0 context.Context, arg1 string, arg2 models.EncryptedData) (models.EncryptedDataLink, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpsertEncryptedData", arg0, arg1, arg2)
	ret0, _ := ret[0].(models.EncryptedDataLink)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpsertEncryptedData indicates an expected call of UpsertEncryptedData.
func (mr *MockStorageMockRecorder) UpsertEncryptedData(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpsertEncryptedData", reflect.TypeOf((*MockStorage)(nil).UpsertEncryptedData), arg0, arg1, arg2)
}
